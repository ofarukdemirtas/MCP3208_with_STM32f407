
mcp_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002660  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800276c  0800276c  0001276c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027dc  080027dc  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080027dc  080027dc  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027dc  080027dc  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027dc  080027dc  000127dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027e0  080027e0  000127e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080027e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  2000005c  08002840  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08002840  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008029  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015bb  00000000  00000000  000280f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007f8  00000000  00000000  000296b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000061c  00000000  00000000  00029ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016bdf  00000000  00000000  0002a4c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009036  00000000  00000000  000410a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00081624  00000000  00000000  0004a0d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000024f4  00000000  00000000  000cb700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000cdbf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002754 	.word	0x08002754

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002754 	.word	0x08002754

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b092      	sub	sp, #72	; 0x48
 8000160:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fa8d 	bl	8000680 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f84f 	bl	8000208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f8f3 	bl	8000354 <MX_GPIO_Init>
  MX_SPI1_Init();
 800016e:	f000 f891 	bl	8000294 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000172:	f000 f8c5 	bl	8000300 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  txData[0] = 0b1000; // Start bit
 8000176:	2308      	movs	r3, #8
 8000178:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	  txData[1] = 0b0000; // Single-ended, channel 0
 800017c:	2300      	movs	r3, #0
 800017e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	  txData[2] = 0;          // Dummy byte
 8000182:	2300      	movs	r3, #0
 8000184:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); // Pull CS low
 8000188:	2200      	movs	r2, #0
 800018a:	2102      	movs	r1, #2
 800018c:	481a      	ldr	r0, [pc, #104]	; (80001f8 <main+0x9c>)
 800018e:	f000 fd5d 	bl	8000c4c <HAL_GPIO_WritePin>
	     HAL_SPI_TransmitReceive(&hspi1, txData, rxData, 3, 100);
 8000192:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000196:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800019a:	2364      	movs	r3, #100	; 0x64
 800019c:	9300      	str	r3, [sp, #0]
 800019e:	2303      	movs	r3, #3
 80001a0:	4816      	ldr	r0, [pc, #88]	; (80001fc <main+0xa0>)
 80001a2:	f001 f9ff 	bl	80015a4 <HAL_SPI_TransmitReceive>
	     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);   // Pull CS high
 80001a6:	2201      	movs	r2, #1
 80001a8:	2102      	movs	r1, #2
 80001aa:	4813      	ldr	r0, [pc, #76]	; (80001f8 <main+0x9c>)
 80001ac:	f000 fd4e 	bl	8000c4c <HAL_GPIO_WritePin>

	     // Convert received data to ADC value
	     uint16_t adcValue = ((rxData[1] & 0x0F) << 8) | rxData[2];
 80001b0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80001b4:	021b      	lsls	r3, r3, #8
 80001b6:	b21b      	sxth	r3, r3
 80001b8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80001bc:	b21a      	sxth	r2, r3
 80001be:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80001c2:	b21b      	sxth	r3, r3
 80001c4:	4313      	orrs	r3, r2
 80001c6:	b21b      	sxth	r3, r3
 80001c8:	87fb      	strh	r3, [r7, #62]	; 0x3e

	     // Print ADC value to console
	     sprintf(msg, "ADC Value: %d\r\n", adcValue);
 80001ca:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80001cc:	463b      	mov	r3, r7
 80001ce:	490c      	ldr	r1, [pc, #48]	; (8000200 <main+0xa4>)
 80001d0:	4618      	mov	r0, r3
 80001d2:	f001 fe0d 	bl	8001df0 <siprintf>
	     HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80001d6:	463b      	mov	r3, r7
 80001d8:	4618      	mov	r0, r3
 80001da:	f7ff ffb7 	bl	800014c <strlen>
 80001de:	4603      	mov	r3, r0
 80001e0:	b29a      	uxth	r2, r3
 80001e2:	4639      	mov	r1, r7
 80001e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80001e8:	4806      	ldr	r0, [pc, #24]	; (8000204 <main+0xa8>)
 80001ea:	f001 fc81 	bl	8001af0 <HAL_UART_Transmit>

	     HAL_Delay(1000); // Delay for readability
 80001ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001f2:	f000 faa7 	bl	8000744 <HAL_Delay>
  {
 80001f6:	e7be      	b.n	8000176 <main+0x1a>
 80001f8:	40010800 	.word	0x40010800
 80001fc:	20000078 	.word	0x20000078
 8000200:	0800276c 	.word	0x0800276c
 8000204:	200000d0 	.word	0x200000d0

08000208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b090      	sub	sp, #64	; 0x40
 800020c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020e:	f107 0318 	add.w	r3, r7, #24
 8000212:	2228      	movs	r2, #40	; 0x28
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f001 fe0a 	bl	8001e30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800021c:	1d3b      	adds	r3, r7, #4
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]
 8000224:	609a      	str	r2, [r3, #8]
 8000226:	60da      	str	r2, [r3, #12]
 8000228:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800022a:	2301      	movs	r3, #1
 800022c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800022e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000232:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000234:	2300      	movs	r3, #0
 8000236:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000238:	2301      	movs	r3, #1
 800023a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800023c:	2302      	movs	r3, #2
 800023e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000240:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000244:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000246:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800024a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800024c:	f107 0318 	add.w	r3, r7, #24
 8000250:	4618      	mov	r0, r3
 8000252:	f000 fd13 	bl	8000c7c <HAL_RCC_OscConfig>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800025c:	f000 f8b8 	bl	80003d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000260:	230f      	movs	r3, #15
 8000262:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000264:	2302      	movs	r3, #2
 8000266:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000268:	2300      	movs	r3, #0
 800026a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800026c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000270:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	2102      	movs	r1, #2
 800027a:	4618      	mov	r0, r3
 800027c:	f000 ff80 	bl	8001180 <HAL_RCC_ClockConfig>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000286:	f000 f8a3 	bl	80003d0 <Error_Handler>
  }
}
 800028a:	bf00      	nop
 800028c:	3740      	adds	r7, #64	; 0x40
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
	...

08000294 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000298:	4b17      	ldr	r3, [pc, #92]	; (80002f8 <MX_SPI1_Init+0x64>)
 800029a:	4a18      	ldr	r2, [pc, #96]	; (80002fc <MX_SPI1_Init+0x68>)
 800029c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800029e:	4b16      	ldr	r3, [pc, #88]	; (80002f8 <MX_SPI1_Init+0x64>)
 80002a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002a6:	4b14      	ldr	r3, [pc, #80]	; (80002f8 <MX_SPI1_Init+0x64>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002ac:	4b12      	ldr	r3, [pc, #72]	; (80002f8 <MX_SPI1_Init+0x64>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002b2:	4b11      	ldr	r3, [pc, #68]	; (80002f8 <MX_SPI1_Init+0x64>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002b8:	4b0f      	ldr	r3, [pc, #60]	; (80002f8 <MX_SPI1_Init+0x64>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002be:	4b0e      	ldr	r3, [pc, #56]	; (80002f8 <MX_SPI1_Init+0x64>)
 80002c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80002c6:	4b0c      	ldr	r3, [pc, #48]	; (80002f8 <MX_SPI1_Init+0x64>)
 80002c8:	2228      	movs	r2, #40	; 0x28
 80002ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002cc:	4b0a      	ldr	r3, [pc, #40]	; (80002f8 <MX_SPI1_Init+0x64>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002d2:	4b09      	ldr	r3, [pc, #36]	; (80002f8 <MX_SPI1_Init+0x64>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002d8:	4b07      	ldr	r3, [pc, #28]	; (80002f8 <MX_SPI1_Init+0x64>)
 80002da:	2200      	movs	r2, #0
 80002dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80002de:	4b06      	ldr	r3, [pc, #24]	; (80002f8 <MX_SPI1_Init+0x64>)
 80002e0:	220a      	movs	r2, #10
 80002e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002e4:	4804      	ldr	r0, [pc, #16]	; (80002f8 <MX_SPI1_Init+0x64>)
 80002e6:	f001 f8d9 	bl	800149c <HAL_SPI_Init>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80002f0:	f000 f86e 	bl	80003d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	20000078 	.word	0x20000078
 80002fc:	40013000 	.word	0x40013000

08000300 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000304:	4b11      	ldr	r3, [pc, #68]	; (800034c <MX_USART1_UART_Init+0x4c>)
 8000306:	4a12      	ldr	r2, [pc, #72]	; (8000350 <MX_USART1_UART_Init+0x50>)
 8000308:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800030a:	4b10      	ldr	r3, [pc, #64]	; (800034c <MX_USART1_UART_Init+0x4c>)
 800030c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000310:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000312:	4b0e      	ldr	r3, [pc, #56]	; (800034c <MX_USART1_UART_Init+0x4c>)
 8000314:	2200      	movs	r2, #0
 8000316:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000318:	4b0c      	ldr	r3, [pc, #48]	; (800034c <MX_USART1_UART_Init+0x4c>)
 800031a:	2200      	movs	r2, #0
 800031c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800031e:	4b0b      	ldr	r3, [pc, #44]	; (800034c <MX_USART1_UART_Init+0x4c>)
 8000320:	2200      	movs	r2, #0
 8000322:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000324:	4b09      	ldr	r3, [pc, #36]	; (800034c <MX_USART1_UART_Init+0x4c>)
 8000326:	220c      	movs	r2, #12
 8000328:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800032a:	4b08      	ldr	r3, [pc, #32]	; (800034c <MX_USART1_UART_Init+0x4c>)
 800032c:	2200      	movs	r2, #0
 800032e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000330:	4b06      	ldr	r3, [pc, #24]	; (800034c <MX_USART1_UART_Init+0x4c>)
 8000332:	2200      	movs	r2, #0
 8000334:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000336:	4805      	ldr	r0, [pc, #20]	; (800034c <MX_USART1_UART_Init+0x4c>)
 8000338:	f001 fb8a 	bl	8001a50 <HAL_UART_Init>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000342:	f000 f845 	bl	80003d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	200000d0 	.word	0x200000d0
 8000350:	40013800 	.word	0x40013800

08000354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b086      	sub	sp, #24
 8000358:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035a:	f107 0308 	add.w	r3, r7, #8
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	605a      	str	r2, [r3, #4]
 8000364:	609a      	str	r2, [r3, #8]
 8000366:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000368:	4b17      	ldr	r3, [pc, #92]	; (80003c8 <MX_GPIO_Init+0x74>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	4a16      	ldr	r2, [pc, #88]	; (80003c8 <MX_GPIO_Init+0x74>)
 800036e:	f043 0320 	orr.w	r3, r3, #32
 8000372:	6193      	str	r3, [r2, #24]
 8000374:	4b14      	ldr	r3, [pc, #80]	; (80003c8 <MX_GPIO_Init+0x74>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	f003 0320 	and.w	r3, r3, #32
 800037c:	607b      	str	r3, [r7, #4]
 800037e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000380:	4b11      	ldr	r3, [pc, #68]	; (80003c8 <MX_GPIO_Init+0x74>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	4a10      	ldr	r2, [pc, #64]	; (80003c8 <MX_GPIO_Init+0x74>)
 8000386:	f043 0304 	orr.w	r3, r3, #4
 800038a:	6193      	str	r3, [r2, #24]
 800038c:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <MX_GPIO_Init+0x74>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	f003 0304 	and.w	r3, r3, #4
 8000394:	603b      	str	r3, [r7, #0]
 8000396:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	2102      	movs	r1, #2
 800039c:	480b      	ldr	r0, [pc, #44]	; (80003cc <MX_GPIO_Init+0x78>)
 800039e:	f000 fc55 	bl	8000c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80003a2:	2302      	movs	r3, #2
 80003a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a6:	2301      	movs	r3, #1
 80003a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003aa:	2300      	movs	r3, #0
 80003ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ae:	2302      	movs	r3, #2
 80003b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003b2:	f107 0308 	add.w	r3, r7, #8
 80003b6:	4619      	mov	r1, r3
 80003b8:	4804      	ldr	r0, [pc, #16]	; (80003cc <MX_GPIO_Init+0x78>)
 80003ba:	f000 facb 	bl	8000954 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003be:	bf00      	nop
 80003c0:	3718      	adds	r7, #24
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	40021000 	.word	0x40021000
 80003cc:	40010800 	.word	0x40010800

080003d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003d4:	b672      	cpsid	i
}
 80003d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003d8:	e7fe      	b.n	80003d8 <Error_Handler+0x8>
	...

080003dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	b085      	sub	sp, #20
 80003e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003e2:	4b15      	ldr	r3, [pc, #84]	; (8000438 <HAL_MspInit+0x5c>)
 80003e4:	699b      	ldr	r3, [r3, #24]
 80003e6:	4a14      	ldr	r2, [pc, #80]	; (8000438 <HAL_MspInit+0x5c>)
 80003e8:	f043 0301 	orr.w	r3, r3, #1
 80003ec:	6193      	str	r3, [r2, #24]
 80003ee:	4b12      	ldr	r3, [pc, #72]	; (8000438 <HAL_MspInit+0x5c>)
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	f003 0301 	and.w	r3, r3, #1
 80003f6:	60bb      	str	r3, [r7, #8]
 80003f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003fa:	4b0f      	ldr	r3, [pc, #60]	; (8000438 <HAL_MspInit+0x5c>)
 80003fc:	69db      	ldr	r3, [r3, #28]
 80003fe:	4a0e      	ldr	r2, [pc, #56]	; (8000438 <HAL_MspInit+0x5c>)
 8000400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000404:	61d3      	str	r3, [r2, #28]
 8000406:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <HAL_MspInit+0x5c>)
 8000408:	69db      	ldr	r3, [r3, #28]
 800040a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800040e:	607b      	str	r3, [r7, #4]
 8000410:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000412:	4b0a      	ldr	r3, [pc, #40]	; (800043c <HAL_MspInit+0x60>)
 8000414:	685b      	ldr	r3, [r3, #4]
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000426:	60fb      	str	r3, [r7, #12]
 8000428:	4a04      	ldr	r2, [pc, #16]	; (800043c <HAL_MspInit+0x60>)
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800042e:	bf00      	nop
 8000430:	3714      	adds	r7, #20
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr
 8000438:	40021000 	.word	0x40021000
 800043c:	40010000 	.word	0x40010000

08000440 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b088      	sub	sp, #32
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000448:	f107 0310 	add.w	r3, r7, #16
 800044c:	2200      	movs	r2, #0
 800044e:	601a      	str	r2, [r3, #0]
 8000450:	605a      	str	r2, [r3, #4]
 8000452:	609a      	str	r2, [r3, #8]
 8000454:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4a1b      	ldr	r2, [pc, #108]	; (80004c8 <HAL_SPI_MspInit+0x88>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d12f      	bne.n	80004c0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <HAL_SPI_MspInit+0x8c>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	4a19      	ldr	r2, [pc, #100]	; (80004cc <HAL_SPI_MspInit+0x8c>)
 8000466:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800046a:	6193      	str	r3, [r2, #24]
 800046c:	4b17      	ldr	r3, [pc, #92]	; (80004cc <HAL_SPI_MspInit+0x8c>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000474:	60fb      	str	r3, [r7, #12]
 8000476:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000478:	4b14      	ldr	r3, [pc, #80]	; (80004cc <HAL_SPI_MspInit+0x8c>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	4a13      	ldr	r2, [pc, #76]	; (80004cc <HAL_SPI_MspInit+0x8c>)
 800047e:	f043 0304 	orr.w	r3, r3, #4
 8000482:	6193      	str	r3, [r2, #24]
 8000484:	4b11      	ldr	r3, [pc, #68]	; (80004cc <HAL_SPI_MspInit+0x8c>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	f003 0304 	and.w	r3, r3, #4
 800048c:	60bb      	str	r3, [r7, #8]
 800048e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000490:	23a0      	movs	r3, #160	; 0xa0
 8000492:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000494:	2302      	movs	r3, #2
 8000496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000498:	2303      	movs	r3, #3
 800049a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800049c:	f107 0310 	add.w	r3, r7, #16
 80004a0:	4619      	mov	r1, r3
 80004a2:	480b      	ldr	r0, [pc, #44]	; (80004d0 <HAL_SPI_MspInit+0x90>)
 80004a4:	f000 fa56 	bl	8000954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80004a8:	2340      	movs	r3, #64	; 0x40
 80004aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004ac:	2300      	movs	r3, #0
 80004ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b0:	2300      	movs	r3, #0
 80004b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b4:	f107 0310 	add.w	r3, r7, #16
 80004b8:	4619      	mov	r1, r3
 80004ba:	4805      	ldr	r0, [pc, #20]	; (80004d0 <HAL_SPI_MspInit+0x90>)
 80004bc:	f000 fa4a 	bl	8000954 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80004c0:	bf00      	nop
 80004c2:	3720      	adds	r7, #32
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40013000 	.word	0x40013000
 80004cc:	40021000 	.word	0x40021000
 80004d0:	40010800 	.word	0x40010800

080004d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b088      	sub	sp, #32
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004dc:	f107 0310 	add.w	r3, r7, #16
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	605a      	str	r2, [r3, #4]
 80004e6:	609a      	str	r2, [r3, #8]
 80004e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a1c      	ldr	r2, [pc, #112]	; (8000560 <HAL_UART_MspInit+0x8c>)
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d131      	bne.n	8000558 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004f4:	4b1b      	ldr	r3, [pc, #108]	; (8000564 <HAL_UART_MspInit+0x90>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	4a1a      	ldr	r2, [pc, #104]	; (8000564 <HAL_UART_MspInit+0x90>)
 80004fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004fe:	6193      	str	r3, [r2, #24]
 8000500:	4b18      	ldr	r3, [pc, #96]	; (8000564 <HAL_UART_MspInit+0x90>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000508:	60fb      	str	r3, [r7, #12]
 800050a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800050c:	4b15      	ldr	r3, [pc, #84]	; (8000564 <HAL_UART_MspInit+0x90>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	4a14      	ldr	r2, [pc, #80]	; (8000564 <HAL_UART_MspInit+0x90>)
 8000512:	f043 0304 	orr.w	r3, r3, #4
 8000516:	6193      	str	r3, [r2, #24]
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_UART_MspInit+0x90>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	f003 0304 	and.w	r3, r3, #4
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000524:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000528:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800052a:	2302      	movs	r3, #2
 800052c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800052e:	2303      	movs	r3, #3
 8000530:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000532:	f107 0310 	add.w	r3, r7, #16
 8000536:	4619      	mov	r1, r3
 8000538:	480b      	ldr	r0, [pc, #44]	; (8000568 <HAL_UART_MspInit+0x94>)
 800053a:	f000 fa0b 	bl	8000954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800053e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000542:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000544:	2300      	movs	r3, #0
 8000546:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000548:	2300      	movs	r3, #0
 800054a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054c:	f107 0310 	add.w	r3, r7, #16
 8000550:	4619      	mov	r1, r3
 8000552:	4805      	ldr	r0, [pc, #20]	; (8000568 <HAL_UART_MspInit+0x94>)
 8000554:	f000 f9fe 	bl	8000954 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000558:	bf00      	nop
 800055a:	3720      	adds	r7, #32
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40013800 	.word	0x40013800
 8000564:	40021000 	.word	0x40021000
 8000568:	40010800 	.word	0x40010800

0800056c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000570:	e7fe      	b.n	8000570 <NMI_Handler+0x4>

08000572 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000572:	b480      	push	{r7}
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000576:	e7fe      	b.n	8000576 <HardFault_Handler+0x4>

08000578 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800057c:	e7fe      	b.n	800057c <MemManage_Handler+0x4>

0800057e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000582:	e7fe      	b.n	8000582 <BusFault_Handler+0x4>

08000584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000588:	e7fe      	b.n	8000588 <UsageFault_Handler+0x4>

0800058a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800058e:	bf00      	nop
 8000590:	46bd      	mov	sp, r7
 8000592:	bc80      	pop	{r7}
 8000594:	4770      	bx	lr

08000596 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000596:	b480      	push	{r7}
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800059a:	bf00      	nop
 800059c:	46bd      	mov	sp, r7
 800059e:	bc80      	pop	{r7}
 80005a0:	4770      	bx	lr

080005a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005a2:	b480      	push	{r7}
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bc80      	pop	{r7}
 80005ac:	4770      	bx	lr

080005ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ae:	b580      	push	{r7, lr}
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005b2:	f000 f8ab 	bl	800070c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
	...

080005bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005c4:	4a14      	ldr	r2, [pc, #80]	; (8000618 <_sbrk+0x5c>)
 80005c6:	4b15      	ldr	r3, [pc, #84]	; (800061c <_sbrk+0x60>)
 80005c8:	1ad3      	subs	r3, r2, r3
 80005ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005d0:	4b13      	ldr	r3, [pc, #76]	; (8000620 <_sbrk+0x64>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d102      	bne.n	80005de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005d8:	4b11      	ldr	r3, [pc, #68]	; (8000620 <_sbrk+0x64>)
 80005da:	4a12      	ldr	r2, [pc, #72]	; (8000624 <_sbrk+0x68>)
 80005dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005de:	4b10      	ldr	r3, [pc, #64]	; (8000620 <_sbrk+0x64>)
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4413      	add	r3, r2
 80005e6:	693a      	ldr	r2, [r7, #16]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d207      	bcs.n	80005fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005ec:	f001 fc28 	bl	8001e40 <__errno>
 80005f0:	4603      	mov	r3, r0
 80005f2:	220c      	movs	r2, #12
 80005f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005fa:	e009      	b.n	8000610 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <_sbrk+0x64>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000602:	4b07      	ldr	r3, [pc, #28]	; (8000620 <_sbrk+0x64>)
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4413      	add	r3, r2
 800060a:	4a05      	ldr	r2, [pc, #20]	; (8000620 <_sbrk+0x64>)
 800060c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800060e:	68fb      	ldr	r3, [r7, #12]
}
 8000610:	4618      	mov	r0, r3
 8000612:	3718      	adds	r7, #24
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20001800 	.word	0x20001800
 800061c:	00000400 	.word	0x00000400
 8000620:	20000118 	.word	0x20000118
 8000624:	20000268 	.word	0x20000268

08000628 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr

08000634 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000634:	f7ff fff8 	bl	8000628 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000638:	480b      	ldr	r0, [pc, #44]	; (8000668 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800063a:	490c      	ldr	r1, [pc, #48]	; (800066c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800063c:	4a0c      	ldr	r2, [pc, #48]	; (8000670 <LoopFillZerobss+0x16>)
  movs r3, #0
 800063e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000640:	e002      	b.n	8000648 <LoopCopyDataInit>

08000642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000646:	3304      	adds	r3, #4

08000648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800064a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800064c:	d3f9      	bcc.n	8000642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800064e:	4a09      	ldr	r2, [pc, #36]	; (8000674 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000650:	4c09      	ldr	r4, [pc, #36]	; (8000678 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000654:	e001      	b.n	800065a <LoopFillZerobss>

08000656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000658:	3204      	adds	r2, #4

0800065a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800065a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800065c:	d3fb      	bcc.n	8000656 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800065e:	f001 fbf5 	bl	8001e4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000662:	f7ff fd7b 	bl	800015c <main>
  bx lr
 8000666:	4770      	bx	lr
  ldr r0, =_sdata
 8000668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800066c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000670:	080027e4 	.word	0x080027e4
  ldr r2, =_sbss
 8000674:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000678:	20000268 	.word	0x20000268

0800067c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800067c:	e7fe      	b.n	800067c <ADC1_2_IRQHandler>
	...

08000680 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000684:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <HAL_Init+0x28>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a07      	ldr	r2, [pc, #28]	; (80006a8 <HAL_Init+0x28>)
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000690:	2003      	movs	r0, #3
 8000692:	f000 f92b 	bl	80008ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000696:	200f      	movs	r0, #15
 8000698:	f000 f808 	bl	80006ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800069c:	f7ff fe9e 	bl	80003dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006a0:	2300      	movs	r3, #0
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40022000 	.word	0x40022000

080006ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <HAL_InitTick+0x54>)
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <HAL_InitTick+0x58>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	4619      	mov	r1, r3
 80006be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 f935 	bl	800093a <HAL_SYSTICK_Config>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006d6:	2301      	movs	r3, #1
 80006d8:	e00e      	b.n	80006f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2b0f      	cmp	r3, #15
 80006de:	d80a      	bhi.n	80006f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006e0:	2200      	movs	r2, #0
 80006e2:	6879      	ldr	r1, [r7, #4]
 80006e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006e8:	f000 f90b 	bl	8000902 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006ec:	4a06      	ldr	r2, [pc, #24]	; (8000708 <HAL_InitTick+0x5c>)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006f2:	2300      	movs	r3, #0
 80006f4:	e000      	b.n	80006f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006f6:	2301      	movs	r3, #1
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000000 	.word	0x20000000
 8000704:	20000008 	.word	0x20000008
 8000708:	20000004 	.word	0x20000004

0800070c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000710:	4b05      	ldr	r3, [pc, #20]	; (8000728 <HAL_IncTick+0x1c>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	461a      	mov	r2, r3
 8000716:	4b05      	ldr	r3, [pc, #20]	; (800072c <HAL_IncTick+0x20>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4413      	add	r3, r2
 800071c:	4a03      	ldr	r2, [pc, #12]	; (800072c <HAL_IncTick+0x20>)
 800071e:	6013      	str	r3, [r2, #0]
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr
 8000728:	20000008 	.word	0x20000008
 800072c:	2000011c 	.word	0x2000011c

08000730 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  return uwTick;
 8000734:	4b02      	ldr	r3, [pc, #8]	; (8000740 <HAL_GetTick+0x10>)
 8000736:	681b      	ldr	r3, [r3, #0]
}
 8000738:	4618      	mov	r0, r3
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr
 8000740:	2000011c 	.word	0x2000011c

08000744 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800074c:	f7ff fff0 	bl	8000730 <HAL_GetTick>
 8000750:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800075c:	d005      	beq.n	800076a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800075e:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <HAL_Delay+0x44>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	461a      	mov	r2, r3
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	4413      	add	r3, r2
 8000768:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800076a:	bf00      	nop
 800076c:	f7ff ffe0 	bl	8000730 <HAL_GetTick>
 8000770:	4602      	mov	r2, r0
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	1ad3      	subs	r3, r2, r3
 8000776:	68fa      	ldr	r2, [r7, #12]
 8000778:	429a      	cmp	r2, r3
 800077a:	d8f7      	bhi.n	800076c <HAL_Delay+0x28>
  {
  }
}
 800077c:	bf00      	nop
 800077e:	bf00      	nop
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000008 	.word	0x20000008

0800078c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	f003 0307 	and.w	r3, r3, #7
 800079a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <__NVIC_SetPriorityGrouping+0x44>)
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007a2:	68ba      	ldr	r2, [r7, #8]
 80007a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007a8:	4013      	ands	r3, r2
 80007aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007be:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <__NVIC_SetPriorityGrouping+0x44>)
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	60d3      	str	r3, [r2, #12]
}
 80007c4:	bf00      	nop
 80007c6:	3714      	adds	r7, #20
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <__NVIC_GetPriorityGrouping+0x18>)
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	0a1b      	lsrs	r3, r3, #8
 80007de:	f003 0307 	and.w	r3, r3, #7
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	6039      	str	r1, [r7, #0]
 80007fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000800:	2b00      	cmp	r3, #0
 8000802:	db0a      	blt.n	800081a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	b2da      	uxtb	r2, r3
 8000808:	490c      	ldr	r1, [pc, #48]	; (800083c <__NVIC_SetPriority+0x4c>)
 800080a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080e:	0112      	lsls	r2, r2, #4
 8000810:	b2d2      	uxtb	r2, r2
 8000812:	440b      	add	r3, r1
 8000814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000818:	e00a      	b.n	8000830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4908      	ldr	r1, [pc, #32]	; (8000840 <__NVIC_SetPriority+0x50>)
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	f003 030f 	and.w	r3, r3, #15
 8000826:	3b04      	subs	r3, #4
 8000828:	0112      	lsls	r2, r2, #4
 800082a:	b2d2      	uxtb	r2, r2
 800082c:	440b      	add	r3, r1
 800082e:	761a      	strb	r2, [r3, #24]
}
 8000830:	bf00      	nop
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	e000e100 	.word	0xe000e100
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000844:	b480      	push	{r7}
 8000846:	b089      	sub	sp, #36	; 0x24
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	f003 0307 	and.w	r3, r3, #7
 8000856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000858:	69fb      	ldr	r3, [r7, #28]
 800085a:	f1c3 0307 	rsb	r3, r3, #7
 800085e:	2b04      	cmp	r3, #4
 8000860:	bf28      	it	cs
 8000862:	2304      	movcs	r3, #4
 8000864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	3304      	adds	r3, #4
 800086a:	2b06      	cmp	r3, #6
 800086c:	d902      	bls.n	8000874 <NVIC_EncodePriority+0x30>
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	3b03      	subs	r3, #3
 8000872:	e000      	b.n	8000876 <NVIC_EncodePriority+0x32>
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000878:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800087c:	69bb      	ldr	r3, [r7, #24]
 800087e:	fa02 f303 	lsl.w	r3, r2, r3
 8000882:	43da      	mvns	r2, r3
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	401a      	ands	r2, r3
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800088c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	fa01 f303 	lsl.w	r3, r1, r3
 8000896:	43d9      	mvns	r1, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800089c:	4313      	orrs	r3, r2
         );
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3724      	adds	r7, #36	; 0x24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr

080008a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	3b01      	subs	r3, #1
 80008b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008b8:	d301      	bcc.n	80008be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ba:	2301      	movs	r3, #1
 80008bc:	e00f      	b.n	80008de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008be:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <SysTick_Config+0x40>)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008c6:	210f      	movs	r1, #15
 80008c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008cc:	f7ff ff90 	bl	80007f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008d0:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <SysTick_Config+0x40>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008d6:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <SysTick_Config+0x40>)
 80008d8:	2207      	movs	r2, #7
 80008da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008dc:	2300      	movs	r3, #0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	e000e010 	.word	0xe000e010

080008ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff ff49 	bl	800078c <__NVIC_SetPriorityGrouping>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000902:	b580      	push	{r7, lr}
 8000904:	b086      	sub	sp, #24
 8000906:	af00      	add	r7, sp, #0
 8000908:	4603      	mov	r3, r0
 800090a:	60b9      	str	r1, [r7, #8]
 800090c:	607a      	str	r2, [r7, #4]
 800090e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000914:	f7ff ff5e 	bl	80007d4 <__NVIC_GetPriorityGrouping>
 8000918:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	68b9      	ldr	r1, [r7, #8]
 800091e:	6978      	ldr	r0, [r7, #20]
 8000920:	f7ff ff90 	bl	8000844 <NVIC_EncodePriority>
 8000924:	4602      	mov	r2, r0
 8000926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800092a:	4611      	mov	r1, r2
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff ff5f 	bl	80007f0 <__NVIC_SetPriority>
}
 8000932:	bf00      	nop
 8000934:	3718      	adds	r7, #24
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b082      	sub	sp, #8
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff ffb0 	bl	80008a8 <SysTick_Config>
 8000948:	4603      	mov	r3, r0
}
 800094a:	4618      	mov	r0, r3
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
	...

08000954 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000954:	b480      	push	{r7}
 8000956:	b08b      	sub	sp, #44	; 0x2c
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000962:	2300      	movs	r3, #0
 8000964:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000966:	e161      	b.n	8000c2c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000968:	2201      	movs	r2, #1
 800096a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096c:	fa02 f303 	lsl.w	r3, r2, r3
 8000970:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	69fa      	ldr	r2, [r7, #28]
 8000978:	4013      	ands	r3, r2
 800097a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800097c:	69ba      	ldr	r2, [r7, #24]
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	429a      	cmp	r2, r3
 8000982:	f040 8150 	bne.w	8000c26 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	4a97      	ldr	r2, [pc, #604]	; (8000be8 <HAL_GPIO_Init+0x294>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d05e      	beq.n	8000a4e <HAL_GPIO_Init+0xfa>
 8000990:	4a95      	ldr	r2, [pc, #596]	; (8000be8 <HAL_GPIO_Init+0x294>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d875      	bhi.n	8000a82 <HAL_GPIO_Init+0x12e>
 8000996:	4a95      	ldr	r2, [pc, #596]	; (8000bec <HAL_GPIO_Init+0x298>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d058      	beq.n	8000a4e <HAL_GPIO_Init+0xfa>
 800099c:	4a93      	ldr	r2, [pc, #588]	; (8000bec <HAL_GPIO_Init+0x298>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d86f      	bhi.n	8000a82 <HAL_GPIO_Init+0x12e>
 80009a2:	4a93      	ldr	r2, [pc, #588]	; (8000bf0 <HAL_GPIO_Init+0x29c>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d052      	beq.n	8000a4e <HAL_GPIO_Init+0xfa>
 80009a8:	4a91      	ldr	r2, [pc, #580]	; (8000bf0 <HAL_GPIO_Init+0x29c>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d869      	bhi.n	8000a82 <HAL_GPIO_Init+0x12e>
 80009ae:	4a91      	ldr	r2, [pc, #580]	; (8000bf4 <HAL_GPIO_Init+0x2a0>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d04c      	beq.n	8000a4e <HAL_GPIO_Init+0xfa>
 80009b4:	4a8f      	ldr	r2, [pc, #572]	; (8000bf4 <HAL_GPIO_Init+0x2a0>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d863      	bhi.n	8000a82 <HAL_GPIO_Init+0x12e>
 80009ba:	4a8f      	ldr	r2, [pc, #572]	; (8000bf8 <HAL_GPIO_Init+0x2a4>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d046      	beq.n	8000a4e <HAL_GPIO_Init+0xfa>
 80009c0:	4a8d      	ldr	r2, [pc, #564]	; (8000bf8 <HAL_GPIO_Init+0x2a4>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d85d      	bhi.n	8000a82 <HAL_GPIO_Init+0x12e>
 80009c6:	2b12      	cmp	r3, #18
 80009c8:	d82a      	bhi.n	8000a20 <HAL_GPIO_Init+0xcc>
 80009ca:	2b12      	cmp	r3, #18
 80009cc:	d859      	bhi.n	8000a82 <HAL_GPIO_Init+0x12e>
 80009ce:	a201      	add	r2, pc, #4	; (adr r2, 80009d4 <HAL_GPIO_Init+0x80>)
 80009d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d4:	08000a4f 	.word	0x08000a4f
 80009d8:	08000a29 	.word	0x08000a29
 80009dc:	08000a3b 	.word	0x08000a3b
 80009e0:	08000a7d 	.word	0x08000a7d
 80009e4:	08000a83 	.word	0x08000a83
 80009e8:	08000a83 	.word	0x08000a83
 80009ec:	08000a83 	.word	0x08000a83
 80009f0:	08000a83 	.word	0x08000a83
 80009f4:	08000a83 	.word	0x08000a83
 80009f8:	08000a83 	.word	0x08000a83
 80009fc:	08000a83 	.word	0x08000a83
 8000a00:	08000a83 	.word	0x08000a83
 8000a04:	08000a83 	.word	0x08000a83
 8000a08:	08000a83 	.word	0x08000a83
 8000a0c:	08000a83 	.word	0x08000a83
 8000a10:	08000a83 	.word	0x08000a83
 8000a14:	08000a83 	.word	0x08000a83
 8000a18:	08000a31 	.word	0x08000a31
 8000a1c:	08000a45 	.word	0x08000a45
 8000a20:	4a76      	ldr	r2, [pc, #472]	; (8000bfc <HAL_GPIO_Init+0x2a8>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d013      	beq.n	8000a4e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a26:	e02c      	b.n	8000a82 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	623b      	str	r3, [r7, #32]
          break;
 8000a2e:	e029      	b.n	8000a84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	3304      	adds	r3, #4
 8000a36:	623b      	str	r3, [r7, #32]
          break;
 8000a38:	e024      	b.n	8000a84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	68db      	ldr	r3, [r3, #12]
 8000a3e:	3308      	adds	r3, #8
 8000a40:	623b      	str	r3, [r7, #32]
          break;
 8000a42:	e01f      	b.n	8000a84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	330c      	adds	r3, #12
 8000a4a:	623b      	str	r3, [r7, #32]
          break;
 8000a4c:	e01a      	b.n	8000a84 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d102      	bne.n	8000a5c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a56:	2304      	movs	r3, #4
 8000a58:	623b      	str	r3, [r7, #32]
          break;
 8000a5a:	e013      	b.n	8000a84 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	689b      	ldr	r3, [r3, #8]
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d105      	bne.n	8000a70 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a64:	2308      	movs	r3, #8
 8000a66:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	69fa      	ldr	r2, [r7, #28]
 8000a6c:	611a      	str	r2, [r3, #16]
          break;
 8000a6e:	e009      	b.n	8000a84 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a70:	2308      	movs	r3, #8
 8000a72:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	69fa      	ldr	r2, [r7, #28]
 8000a78:	615a      	str	r2, [r3, #20]
          break;
 8000a7a:	e003      	b.n	8000a84 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	623b      	str	r3, [r7, #32]
          break;
 8000a80:	e000      	b.n	8000a84 <HAL_GPIO_Init+0x130>
          break;
 8000a82:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a84:	69bb      	ldr	r3, [r7, #24]
 8000a86:	2bff      	cmp	r3, #255	; 0xff
 8000a88:	d801      	bhi.n	8000a8e <HAL_GPIO_Init+0x13a>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	e001      	b.n	8000a92 <HAL_GPIO_Init+0x13e>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	3304      	adds	r3, #4
 8000a92:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	2bff      	cmp	r3, #255	; 0xff
 8000a98:	d802      	bhi.n	8000aa0 <HAL_GPIO_Init+0x14c>
 8000a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	e002      	b.n	8000aa6 <HAL_GPIO_Init+0x152>
 8000aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa2:	3b08      	subs	r3, #8
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	210f      	movs	r1, #15
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	401a      	ands	r2, r3
 8000ab8:	6a39      	ldr	r1, [r7, #32]
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac0:	431a      	orrs	r2, r3
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	f000 80a9 	beq.w	8000c26 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ad4:	4b4a      	ldr	r3, [pc, #296]	; (8000c00 <HAL_GPIO_Init+0x2ac>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	4a49      	ldr	r2, [pc, #292]	; (8000c00 <HAL_GPIO_Init+0x2ac>)
 8000ada:	f043 0301 	orr.w	r3, r3, #1
 8000ade:	6193      	str	r3, [r2, #24]
 8000ae0:	4b47      	ldr	r3, [pc, #284]	; (8000c00 <HAL_GPIO_Init+0x2ac>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000aec:	4a45      	ldr	r2, [pc, #276]	; (8000c04 <HAL_GPIO_Init+0x2b0>)
 8000aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af0:	089b      	lsrs	r3, r3, #2
 8000af2:	3302      	adds	r3, #2
 8000af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afc:	f003 0303 	and.w	r3, r3, #3
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	220f      	movs	r2, #15
 8000b04:	fa02 f303 	lsl.w	r3, r2, r3
 8000b08:	43db      	mvns	r3, r3
 8000b0a:	68fa      	ldr	r2, [r7, #12]
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4a3d      	ldr	r2, [pc, #244]	; (8000c08 <HAL_GPIO_Init+0x2b4>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d00d      	beq.n	8000b34 <HAL_GPIO_Init+0x1e0>
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4a3c      	ldr	r2, [pc, #240]	; (8000c0c <HAL_GPIO_Init+0x2b8>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d007      	beq.n	8000b30 <HAL_GPIO_Init+0x1dc>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a3b      	ldr	r2, [pc, #236]	; (8000c10 <HAL_GPIO_Init+0x2bc>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d101      	bne.n	8000b2c <HAL_GPIO_Init+0x1d8>
 8000b28:	2302      	movs	r3, #2
 8000b2a:	e004      	b.n	8000b36 <HAL_GPIO_Init+0x1e2>
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	e002      	b.n	8000b36 <HAL_GPIO_Init+0x1e2>
 8000b30:	2301      	movs	r3, #1
 8000b32:	e000      	b.n	8000b36 <HAL_GPIO_Init+0x1e2>
 8000b34:	2300      	movs	r3, #0
 8000b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b38:	f002 0203 	and.w	r2, r2, #3
 8000b3c:	0092      	lsls	r2, r2, #2
 8000b3e:	4093      	lsls	r3, r2
 8000b40:	68fa      	ldr	r2, [r7, #12]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b46:	492f      	ldr	r1, [pc, #188]	; (8000c04 <HAL_GPIO_Init+0x2b0>)
 8000b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b4a:	089b      	lsrs	r3, r3, #2
 8000b4c:	3302      	adds	r3, #2
 8000b4e:	68fa      	ldr	r2, [r7, #12]
 8000b50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d006      	beq.n	8000b6e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b60:	4b2c      	ldr	r3, [pc, #176]	; (8000c14 <HAL_GPIO_Init+0x2c0>)
 8000b62:	689a      	ldr	r2, [r3, #8]
 8000b64:	492b      	ldr	r1, [pc, #172]	; (8000c14 <HAL_GPIO_Init+0x2c0>)
 8000b66:	69bb      	ldr	r3, [r7, #24]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	608b      	str	r3, [r1, #8]
 8000b6c:	e006      	b.n	8000b7c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b6e:	4b29      	ldr	r3, [pc, #164]	; (8000c14 <HAL_GPIO_Init+0x2c0>)
 8000b70:	689a      	ldr	r2, [r3, #8]
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	43db      	mvns	r3, r3
 8000b76:	4927      	ldr	r1, [pc, #156]	; (8000c14 <HAL_GPIO_Init+0x2c0>)
 8000b78:	4013      	ands	r3, r2
 8000b7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d006      	beq.n	8000b96 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b88:	4b22      	ldr	r3, [pc, #136]	; (8000c14 <HAL_GPIO_Init+0x2c0>)
 8000b8a:	68da      	ldr	r2, [r3, #12]
 8000b8c:	4921      	ldr	r1, [pc, #132]	; (8000c14 <HAL_GPIO_Init+0x2c0>)
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	60cb      	str	r3, [r1, #12]
 8000b94:	e006      	b.n	8000ba4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b96:	4b1f      	ldr	r3, [pc, #124]	; (8000c14 <HAL_GPIO_Init+0x2c0>)
 8000b98:	68da      	ldr	r2, [r3, #12]
 8000b9a:	69bb      	ldr	r3, [r7, #24]
 8000b9c:	43db      	mvns	r3, r3
 8000b9e:	491d      	ldr	r1, [pc, #116]	; (8000c14 <HAL_GPIO_Init+0x2c0>)
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d006      	beq.n	8000bbe <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bb0:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <HAL_GPIO_Init+0x2c0>)
 8000bb2:	685a      	ldr	r2, [r3, #4]
 8000bb4:	4917      	ldr	r1, [pc, #92]	; (8000c14 <HAL_GPIO_Init+0x2c0>)
 8000bb6:	69bb      	ldr	r3, [r7, #24]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	604b      	str	r3, [r1, #4]
 8000bbc:	e006      	b.n	8000bcc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <HAL_GPIO_Init+0x2c0>)
 8000bc0:	685a      	ldr	r2, [r3, #4]
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	4913      	ldr	r1, [pc, #76]	; (8000c14 <HAL_GPIO_Init+0x2c0>)
 8000bc8:	4013      	ands	r3, r2
 8000bca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d01f      	beq.n	8000c18 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bd8:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <HAL_GPIO_Init+0x2c0>)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	490d      	ldr	r1, [pc, #52]	; (8000c14 <HAL_GPIO_Init+0x2c0>)
 8000bde:	69bb      	ldr	r3, [r7, #24]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	600b      	str	r3, [r1, #0]
 8000be4:	e01f      	b.n	8000c26 <HAL_GPIO_Init+0x2d2>
 8000be6:	bf00      	nop
 8000be8:	10320000 	.word	0x10320000
 8000bec:	10310000 	.word	0x10310000
 8000bf0:	10220000 	.word	0x10220000
 8000bf4:	10210000 	.word	0x10210000
 8000bf8:	10120000 	.word	0x10120000
 8000bfc:	10110000 	.word	0x10110000
 8000c00:	40021000 	.word	0x40021000
 8000c04:	40010000 	.word	0x40010000
 8000c08:	40010800 	.word	0x40010800
 8000c0c:	40010c00 	.word	0x40010c00
 8000c10:	40011000 	.word	0x40011000
 8000c14:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c18:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <HAL_GPIO_Init+0x2f4>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	4909      	ldr	r1, [pc, #36]	; (8000c48 <HAL_GPIO_Init+0x2f4>)
 8000c22:	4013      	ands	r3, r2
 8000c24:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c28:	3301      	adds	r3, #1
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c32:	fa22 f303 	lsr.w	r3, r2, r3
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	f47f ae96 	bne.w	8000968 <HAL_GPIO_Init+0x14>
  }
}
 8000c3c:	bf00      	nop
 8000c3e:	bf00      	nop
 8000c40:	372c      	adds	r7, #44	; 0x2c
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr
 8000c48:	40010400 	.word	0x40010400

08000c4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	460b      	mov	r3, r1
 8000c56:	807b      	strh	r3, [r7, #2]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c5c:	787b      	ldrb	r3, [r7, #1]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d003      	beq.n	8000c6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c62:	887a      	ldrh	r2, [r7, #2]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c68:	e003      	b.n	8000c72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c6a:	887b      	ldrh	r3, [r7, #2]
 8000c6c:	041a      	lsls	r2, r3, #16
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	611a      	str	r2, [r3, #16]
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr

08000c7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d101      	bne.n	8000c8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e272      	b.n	8001174 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f000 8087 	beq.w	8000daa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c9c:	4b92      	ldr	r3, [pc, #584]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f003 030c 	and.w	r3, r3, #12
 8000ca4:	2b04      	cmp	r3, #4
 8000ca6:	d00c      	beq.n	8000cc2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ca8:	4b8f      	ldr	r3, [pc, #572]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f003 030c 	and.w	r3, r3, #12
 8000cb0:	2b08      	cmp	r3, #8
 8000cb2:	d112      	bne.n	8000cda <HAL_RCC_OscConfig+0x5e>
 8000cb4:	4b8c      	ldr	r3, [pc, #560]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cc0:	d10b      	bne.n	8000cda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cc2:	4b89      	ldr	r3, [pc, #548]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d06c      	beq.n	8000da8 <HAL_RCC_OscConfig+0x12c>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d168      	bne.n	8000da8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e24c      	b.n	8001174 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ce2:	d106      	bne.n	8000cf2 <HAL_RCC_OscConfig+0x76>
 8000ce4:	4b80      	ldr	r3, [pc, #512]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a7f      	ldr	r2, [pc, #508]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cee:	6013      	str	r3, [r2, #0]
 8000cf0:	e02e      	b.n	8000d50 <HAL_RCC_OscConfig+0xd4>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d10c      	bne.n	8000d14 <HAL_RCC_OscConfig+0x98>
 8000cfa:	4b7b      	ldr	r3, [pc, #492]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a7a      	ldr	r2, [pc, #488]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000d00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d04:	6013      	str	r3, [r2, #0]
 8000d06:	4b78      	ldr	r3, [pc, #480]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a77      	ldr	r2, [pc, #476]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000d0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d10:	6013      	str	r3, [r2, #0]
 8000d12:	e01d      	b.n	8000d50 <HAL_RCC_OscConfig+0xd4>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d1c:	d10c      	bne.n	8000d38 <HAL_RCC_OscConfig+0xbc>
 8000d1e:	4b72      	ldr	r3, [pc, #456]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a71      	ldr	r2, [pc, #452]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d28:	6013      	str	r3, [r2, #0]
 8000d2a:	4b6f      	ldr	r3, [pc, #444]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a6e      	ldr	r2, [pc, #440]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d34:	6013      	str	r3, [r2, #0]
 8000d36:	e00b      	b.n	8000d50 <HAL_RCC_OscConfig+0xd4>
 8000d38:	4b6b      	ldr	r3, [pc, #428]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a6a      	ldr	r2, [pc, #424]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d42:	6013      	str	r3, [r2, #0]
 8000d44:	4b68      	ldr	r3, [pc, #416]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a67      	ldr	r2, [pc, #412]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d013      	beq.n	8000d80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d58:	f7ff fcea 	bl	8000730 <HAL_GetTick>
 8000d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d5e:	e008      	b.n	8000d72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d60:	f7ff fce6 	bl	8000730 <HAL_GetTick>
 8000d64:	4602      	mov	r2, r0
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	2b64      	cmp	r3, #100	; 0x64
 8000d6c:	d901      	bls.n	8000d72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	e200      	b.n	8001174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d72:	4b5d      	ldr	r3, [pc, #372]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d0f0      	beq.n	8000d60 <HAL_RCC_OscConfig+0xe4>
 8000d7e:	e014      	b.n	8000daa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d80:	f7ff fcd6 	bl	8000730 <HAL_GetTick>
 8000d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d86:	e008      	b.n	8000d9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d88:	f7ff fcd2 	bl	8000730 <HAL_GetTick>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	2b64      	cmp	r3, #100	; 0x64
 8000d94:	d901      	bls.n	8000d9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d96:	2303      	movs	r3, #3
 8000d98:	e1ec      	b.n	8001174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d9a:	4b53      	ldr	r3, [pc, #332]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d1f0      	bne.n	8000d88 <HAL_RCC_OscConfig+0x10c>
 8000da6:	e000      	b.n	8000daa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d063      	beq.n	8000e7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000db6:	4b4c      	ldr	r3, [pc, #304]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f003 030c 	and.w	r3, r3, #12
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d00b      	beq.n	8000dda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000dc2:	4b49      	ldr	r3, [pc, #292]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f003 030c 	and.w	r3, r3, #12
 8000dca:	2b08      	cmp	r3, #8
 8000dcc:	d11c      	bne.n	8000e08 <HAL_RCC_OscConfig+0x18c>
 8000dce:	4b46      	ldr	r3, [pc, #280]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d116      	bne.n	8000e08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dda:	4b43      	ldr	r3, [pc, #268]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d005      	beq.n	8000df2 <HAL_RCC_OscConfig+0x176>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	691b      	ldr	r3, [r3, #16]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d001      	beq.n	8000df2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e1c0      	b.n	8001174 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000df2:	4b3d      	ldr	r3, [pc, #244]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	695b      	ldr	r3, [r3, #20]
 8000dfe:	00db      	lsls	r3, r3, #3
 8000e00:	4939      	ldr	r1, [pc, #228]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000e02:	4313      	orrs	r3, r2
 8000e04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e06:	e03a      	b.n	8000e7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	691b      	ldr	r3, [r3, #16]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d020      	beq.n	8000e52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e10:	4b36      	ldr	r3, [pc, #216]	; (8000eec <HAL_RCC_OscConfig+0x270>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e16:	f7ff fc8b 	bl	8000730 <HAL_GetTick>
 8000e1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e1c:	e008      	b.n	8000e30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e1e:	f7ff fc87 	bl	8000730 <HAL_GetTick>
 8000e22:	4602      	mov	r2, r0
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d901      	bls.n	8000e30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	e1a1      	b.n	8001174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e30:	4b2d      	ldr	r3, [pc, #180]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f003 0302 	and.w	r3, r3, #2
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d0f0      	beq.n	8000e1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e3c:	4b2a      	ldr	r3, [pc, #168]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	695b      	ldr	r3, [r3, #20]
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	4927      	ldr	r1, [pc, #156]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	600b      	str	r3, [r1, #0]
 8000e50:	e015      	b.n	8000e7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e52:	4b26      	ldr	r3, [pc, #152]	; (8000eec <HAL_RCC_OscConfig+0x270>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e58:	f7ff fc6a 	bl	8000730 <HAL_GetTick>
 8000e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e5e:	e008      	b.n	8000e72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e60:	f7ff fc66 	bl	8000730 <HAL_GetTick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d901      	bls.n	8000e72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e180      	b.n	8001174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e72:	4b1d      	ldr	r3, [pc, #116]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d1f0      	bne.n	8000e60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 0308 	and.w	r3, r3, #8
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d03a      	beq.n	8000f00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d019      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e92:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e98:	f7ff fc4a 	bl	8000730 <HAL_GetTick>
 8000e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e9e:	e008      	b.n	8000eb2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ea0:	f7ff fc46 	bl	8000730 <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d901      	bls.n	8000eb2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e160      	b.n	8001174 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d0f0      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	f000 face 	bl	8001460 <RCC_Delay>
 8000ec4:	e01c      	b.n	8000f00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ecc:	f7ff fc30 	bl	8000730 <HAL_GetTick>
 8000ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ed2:	e00f      	b.n	8000ef4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ed4:	f7ff fc2c 	bl	8000730 <HAL_GetTick>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d908      	bls.n	8000ef4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e146      	b.n	8001174 <HAL_RCC_OscConfig+0x4f8>
 8000ee6:	bf00      	nop
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	42420000 	.word	0x42420000
 8000ef0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ef4:	4b92      	ldr	r3, [pc, #584]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef8:	f003 0302 	and.w	r3, r3, #2
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1e9      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f003 0304 	and.w	r3, r3, #4
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f000 80a6 	beq.w	800105a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f12:	4b8b      	ldr	r3, [pc, #556]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000f14:	69db      	ldr	r3, [r3, #28]
 8000f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d10d      	bne.n	8000f3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f1e:	4b88      	ldr	r3, [pc, #544]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000f20:	69db      	ldr	r3, [r3, #28]
 8000f22:	4a87      	ldr	r2, [pc, #540]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f28:	61d3      	str	r3, [r2, #28]
 8000f2a:	4b85      	ldr	r3, [pc, #532]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000f2c:	69db      	ldr	r3, [r3, #28]
 8000f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f36:	2301      	movs	r3, #1
 8000f38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f3a:	4b82      	ldr	r3, [pc, #520]	; (8001144 <HAL_RCC_OscConfig+0x4c8>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d118      	bne.n	8000f78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f46:	4b7f      	ldr	r3, [pc, #508]	; (8001144 <HAL_RCC_OscConfig+0x4c8>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a7e      	ldr	r2, [pc, #504]	; (8001144 <HAL_RCC_OscConfig+0x4c8>)
 8000f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f52:	f7ff fbed 	bl	8000730 <HAL_GetTick>
 8000f56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f58:	e008      	b.n	8000f6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f5a:	f7ff fbe9 	bl	8000730 <HAL_GetTick>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	2b64      	cmp	r3, #100	; 0x64
 8000f66:	d901      	bls.n	8000f6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	e103      	b.n	8001174 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f6c:	4b75      	ldr	r3, [pc, #468]	; (8001144 <HAL_RCC_OscConfig+0x4c8>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d0f0      	beq.n	8000f5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d106      	bne.n	8000f8e <HAL_RCC_OscConfig+0x312>
 8000f80:	4b6f      	ldr	r3, [pc, #444]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000f82:	6a1b      	ldr	r3, [r3, #32]
 8000f84:	4a6e      	ldr	r2, [pc, #440]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	6213      	str	r3, [r2, #32]
 8000f8c:	e02d      	b.n	8000fea <HAL_RCC_OscConfig+0x36e>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d10c      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x334>
 8000f96:	4b6a      	ldr	r3, [pc, #424]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000f98:	6a1b      	ldr	r3, [r3, #32]
 8000f9a:	4a69      	ldr	r2, [pc, #420]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000f9c:	f023 0301 	bic.w	r3, r3, #1
 8000fa0:	6213      	str	r3, [r2, #32]
 8000fa2:	4b67      	ldr	r3, [pc, #412]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000fa4:	6a1b      	ldr	r3, [r3, #32]
 8000fa6:	4a66      	ldr	r2, [pc, #408]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000fa8:	f023 0304 	bic.w	r3, r3, #4
 8000fac:	6213      	str	r3, [r2, #32]
 8000fae:	e01c      	b.n	8000fea <HAL_RCC_OscConfig+0x36e>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	2b05      	cmp	r3, #5
 8000fb6:	d10c      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x356>
 8000fb8:	4b61      	ldr	r3, [pc, #388]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000fba:	6a1b      	ldr	r3, [r3, #32]
 8000fbc:	4a60      	ldr	r2, [pc, #384]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000fbe:	f043 0304 	orr.w	r3, r3, #4
 8000fc2:	6213      	str	r3, [r2, #32]
 8000fc4:	4b5e      	ldr	r3, [pc, #376]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000fc6:	6a1b      	ldr	r3, [r3, #32]
 8000fc8:	4a5d      	ldr	r2, [pc, #372]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000fca:	f043 0301 	orr.w	r3, r3, #1
 8000fce:	6213      	str	r3, [r2, #32]
 8000fd0:	e00b      	b.n	8000fea <HAL_RCC_OscConfig+0x36e>
 8000fd2:	4b5b      	ldr	r3, [pc, #364]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000fd4:	6a1b      	ldr	r3, [r3, #32]
 8000fd6:	4a5a      	ldr	r2, [pc, #360]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000fd8:	f023 0301 	bic.w	r3, r3, #1
 8000fdc:	6213      	str	r3, [r2, #32]
 8000fde:	4b58      	ldr	r3, [pc, #352]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000fe0:	6a1b      	ldr	r3, [r3, #32]
 8000fe2:	4a57      	ldr	r2, [pc, #348]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000fe4:	f023 0304 	bic.w	r3, r3, #4
 8000fe8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d015      	beq.n	800101e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ff2:	f7ff fb9d 	bl	8000730 <HAL_GetTick>
 8000ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ff8:	e00a      	b.n	8001010 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ffa:	f7ff fb99 	bl	8000730 <HAL_GetTick>
 8000ffe:	4602      	mov	r2, r0
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	f241 3288 	movw	r2, #5000	; 0x1388
 8001008:	4293      	cmp	r3, r2
 800100a:	d901      	bls.n	8001010 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800100c:	2303      	movs	r3, #3
 800100e:	e0b1      	b.n	8001174 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001010:	4b4b      	ldr	r3, [pc, #300]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8001012:	6a1b      	ldr	r3, [r3, #32]
 8001014:	f003 0302 	and.w	r3, r3, #2
 8001018:	2b00      	cmp	r3, #0
 800101a:	d0ee      	beq.n	8000ffa <HAL_RCC_OscConfig+0x37e>
 800101c:	e014      	b.n	8001048 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800101e:	f7ff fb87 	bl	8000730 <HAL_GetTick>
 8001022:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001024:	e00a      	b.n	800103c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001026:	f7ff fb83 	bl	8000730 <HAL_GetTick>
 800102a:	4602      	mov	r2, r0
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	f241 3288 	movw	r2, #5000	; 0x1388
 8001034:	4293      	cmp	r3, r2
 8001036:	d901      	bls.n	800103c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	e09b      	b.n	8001174 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800103c:	4b40      	ldr	r3, [pc, #256]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 800103e:	6a1b      	ldr	r3, [r3, #32]
 8001040:	f003 0302 	and.w	r3, r3, #2
 8001044:	2b00      	cmp	r3, #0
 8001046:	d1ee      	bne.n	8001026 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001048:	7dfb      	ldrb	r3, [r7, #23]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d105      	bne.n	800105a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800104e:	4b3c      	ldr	r3, [pc, #240]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8001050:	69db      	ldr	r3, [r3, #28]
 8001052:	4a3b      	ldr	r2, [pc, #236]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8001054:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001058:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	69db      	ldr	r3, [r3, #28]
 800105e:	2b00      	cmp	r3, #0
 8001060:	f000 8087 	beq.w	8001172 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001064:	4b36      	ldr	r3, [pc, #216]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 030c 	and.w	r3, r3, #12
 800106c:	2b08      	cmp	r3, #8
 800106e:	d061      	beq.n	8001134 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	69db      	ldr	r3, [r3, #28]
 8001074:	2b02      	cmp	r3, #2
 8001076:	d146      	bne.n	8001106 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001078:	4b33      	ldr	r3, [pc, #204]	; (8001148 <HAL_RCC_OscConfig+0x4cc>)
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800107e:	f7ff fb57 	bl	8000730 <HAL_GetTick>
 8001082:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001084:	e008      	b.n	8001098 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001086:	f7ff fb53 	bl	8000730 <HAL_GetTick>
 800108a:	4602      	mov	r2, r0
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	2b02      	cmp	r3, #2
 8001092:	d901      	bls.n	8001098 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001094:	2303      	movs	r3, #3
 8001096:	e06d      	b.n	8001174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001098:	4b29      	ldr	r3, [pc, #164]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d1f0      	bne.n	8001086 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6a1b      	ldr	r3, [r3, #32]
 80010a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ac:	d108      	bne.n	80010c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010ae:	4b24      	ldr	r3, [pc, #144]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	4921      	ldr	r1, [pc, #132]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 80010bc:	4313      	orrs	r3, r2
 80010be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010c0:	4b1f      	ldr	r3, [pc, #124]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a19      	ldr	r1, [r3, #32]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d0:	430b      	orrs	r3, r1
 80010d2:	491b      	ldr	r1, [pc, #108]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 80010d4:	4313      	orrs	r3, r2
 80010d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010d8:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <HAL_RCC_OscConfig+0x4cc>)
 80010da:	2201      	movs	r2, #1
 80010dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010de:	f7ff fb27 	bl	8000730 <HAL_GetTick>
 80010e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010e4:	e008      	b.n	80010f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010e6:	f7ff fb23 	bl	8000730 <HAL_GetTick>
 80010ea:	4602      	mov	r2, r0
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d901      	bls.n	80010f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80010f4:	2303      	movs	r3, #3
 80010f6:	e03d      	b.n	8001174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010f8:	4b11      	ldr	r3, [pc, #68]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d0f0      	beq.n	80010e6 <HAL_RCC_OscConfig+0x46a>
 8001104:	e035      	b.n	8001172 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <HAL_RCC_OscConfig+0x4cc>)
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110c:	f7ff fb10 	bl	8000730 <HAL_GetTick>
 8001110:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001112:	e008      	b.n	8001126 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001114:	f7ff fb0c 	bl	8000730 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b02      	cmp	r3, #2
 8001120:	d901      	bls.n	8001126 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e026      	b.n	8001174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001126:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1f0      	bne.n	8001114 <HAL_RCC_OscConfig+0x498>
 8001132:	e01e      	b.n	8001172 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	69db      	ldr	r3, [r3, #28]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d107      	bne.n	800114c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e019      	b.n	8001174 <HAL_RCC_OscConfig+0x4f8>
 8001140:	40021000 	.word	0x40021000
 8001144:	40007000 	.word	0x40007000
 8001148:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800114c:	4b0b      	ldr	r3, [pc, #44]	; (800117c <HAL_RCC_OscConfig+0x500>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a1b      	ldr	r3, [r3, #32]
 800115c:	429a      	cmp	r2, r3
 800115e:	d106      	bne.n	800116e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800116a:	429a      	cmp	r2, r3
 800116c:	d001      	beq.n	8001172 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e000      	b.n	8001174 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40021000 	.word	0x40021000

08001180 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d101      	bne.n	8001194 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e0d0      	b.n	8001336 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001194:	4b6a      	ldr	r3, [pc, #424]	; (8001340 <HAL_RCC_ClockConfig+0x1c0>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0307 	and.w	r3, r3, #7
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d910      	bls.n	80011c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011a2:	4b67      	ldr	r3, [pc, #412]	; (8001340 <HAL_RCC_ClockConfig+0x1c0>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f023 0207 	bic.w	r2, r3, #7
 80011aa:	4965      	ldr	r1, [pc, #404]	; (8001340 <HAL_RCC_ClockConfig+0x1c0>)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011b2:	4b63      	ldr	r3, [pc, #396]	; (8001340 <HAL_RCC_ClockConfig+0x1c0>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	683a      	ldr	r2, [r7, #0]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d001      	beq.n	80011c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e0b8      	b.n	8001336 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0302 	and.w	r3, r3, #2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d020      	beq.n	8001212 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d005      	beq.n	80011e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011dc:	4b59      	ldr	r3, [pc, #356]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	4a58      	ldr	r2, [pc, #352]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 80011e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80011e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0308 	and.w	r3, r3, #8
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d005      	beq.n	8001200 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011f4:	4b53      	ldr	r3, [pc, #332]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	4a52      	ldr	r2, [pc, #328]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 80011fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80011fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001200:	4b50      	ldr	r3, [pc, #320]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	494d      	ldr	r1, [pc, #308]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 800120e:	4313      	orrs	r3, r2
 8001210:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	2b00      	cmp	r3, #0
 800121c:	d040      	beq.n	80012a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d107      	bne.n	8001236 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001226:	4b47      	ldr	r3, [pc, #284]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d115      	bne.n	800125e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e07f      	b.n	8001336 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	2b02      	cmp	r3, #2
 800123c:	d107      	bne.n	800124e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800123e:	4b41      	ldr	r3, [pc, #260]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d109      	bne.n	800125e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e073      	b.n	8001336 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800124e:	4b3d      	ldr	r3, [pc, #244]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d101      	bne.n	800125e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e06b      	b.n	8001336 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800125e:	4b39      	ldr	r3, [pc, #228]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f023 0203 	bic.w	r2, r3, #3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	4936      	ldr	r1, [pc, #216]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 800126c:	4313      	orrs	r3, r2
 800126e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001270:	f7ff fa5e 	bl	8000730 <HAL_GetTick>
 8001274:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001276:	e00a      	b.n	800128e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001278:	f7ff fa5a 	bl	8000730 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	f241 3288 	movw	r2, #5000	; 0x1388
 8001286:	4293      	cmp	r3, r2
 8001288:	d901      	bls.n	800128e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e053      	b.n	8001336 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800128e:	4b2d      	ldr	r3, [pc, #180]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f003 020c 	and.w	r2, r3, #12
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	429a      	cmp	r2, r3
 800129e:	d1eb      	bne.n	8001278 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012a0:	4b27      	ldr	r3, [pc, #156]	; (8001340 <HAL_RCC_ClockConfig+0x1c0>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0307 	and.w	r3, r3, #7
 80012a8:	683a      	ldr	r2, [r7, #0]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d210      	bcs.n	80012d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ae:	4b24      	ldr	r3, [pc, #144]	; (8001340 <HAL_RCC_ClockConfig+0x1c0>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f023 0207 	bic.w	r2, r3, #7
 80012b6:	4922      	ldr	r1, [pc, #136]	; (8001340 <HAL_RCC_ClockConfig+0x1c0>)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012be:	4b20      	ldr	r3, [pc, #128]	; (8001340 <HAL_RCC_ClockConfig+0x1c0>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	683a      	ldr	r2, [r7, #0]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d001      	beq.n	80012d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e032      	b.n	8001336 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d008      	beq.n	80012ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012dc:	4b19      	ldr	r3, [pc, #100]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	4916      	ldr	r1, [pc, #88]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 80012ea:	4313      	orrs	r3, r2
 80012ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0308 	and.w	r3, r3, #8
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d009      	beq.n	800130e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012fa:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	490e      	ldr	r1, [pc, #56]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 800130a:	4313      	orrs	r3, r2
 800130c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800130e:	f000 f821 	bl	8001354 <HAL_RCC_GetSysClockFreq>
 8001312:	4602      	mov	r2, r0
 8001314:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	091b      	lsrs	r3, r3, #4
 800131a:	f003 030f 	and.w	r3, r3, #15
 800131e:	490a      	ldr	r1, [pc, #40]	; (8001348 <HAL_RCC_ClockConfig+0x1c8>)
 8001320:	5ccb      	ldrb	r3, [r1, r3]
 8001322:	fa22 f303 	lsr.w	r3, r2, r3
 8001326:	4a09      	ldr	r2, [pc, #36]	; (800134c <HAL_RCC_ClockConfig+0x1cc>)
 8001328:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <HAL_RCC_ClockConfig+0x1d0>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f9bc 	bl	80006ac <HAL_InitTick>

  return HAL_OK;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40022000 	.word	0x40022000
 8001344:	40021000 	.word	0x40021000
 8001348:	0800277c 	.word	0x0800277c
 800134c:	20000000 	.word	0x20000000
 8001350:	20000004 	.word	0x20000004

08001354 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001354:	b480      	push	{r7}
 8001356:	b087      	sub	sp, #28
 8001358:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	2300      	movs	r3, #0
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800136e:	4b1e      	ldr	r3, [pc, #120]	; (80013e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f003 030c 	and.w	r3, r3, #12
 800137a:	2b04      	cmp	r3, #4
 800137c:	d002      	beq.n	8001384 <HAL_RCC_GetSysClockFreq+0x30>
 800137e:	2b08      	cmp	r3, #8
 8001380:	d003      	beq.n	800138a <HAL_RCC_GetSysClockFreq+0x36>
 8001382:	e027      	b.n	80013d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001384:	4b19      	ldr	r3, [pc, #100]	; (80013ec <HAL_RCC_GetSysClockFreq+0x98>)
 8001386:	613b      	str	r3, [r7, #16]
      break;
 8001388:	e027      	b.n	80013da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	0c9b      	lsrs	r3, r3, #18
 800138e:	f003 030f 	and.w	r3, r3, #15
 8001392:	4a17      	ldr	r2, [pc, #92]	; (80013f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001394:	5cd3      	ldrb	r3, [r2, r3]
 8001396:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d010      	beq.n	80013c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	0c5b      	lsrs	r3, r3, #17
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	4a11      	ldr	r2, [pc, #68]	; (80013f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80013ae:	5cd3      	ldrb	r3, [r2, r3]
 80013b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a0d      	ldr	r2, [pc, #52]	; (80013ec <HAL_RCC_GetSysClockFreq+0x98>)
 80013b6:	fb03 f202 	mul.w	r2, r3, r2
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c0:	617b      	str	r3, [r7, #20]
 80013c2:	e004      	b.n	80013ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a0c      	ldr	r2, [pc, #48]	; (80013f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80013c8:	fb02 f303 	mul.w	r3, r2, r3
 80013cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	613b      	str	r3, [r7, #16]
      break;
 80013d2:	e002      	b.n	80013da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013d4:	4b05      	ldr	r3, [pc, #20]	; (80013ec <HAL_RCC_GetSysClockFreq+0x98>)
 80013d6:	613b      	str	r3, [r7, #16]
      break;
 80013d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013da:	693b      	ldr	r3, [r7, #16]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	371c      	adds	r7, #28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	40021000 	.word	0x40021000
 80013ec:	007a1200 	.word	0x007a1200
 80013f0:	08002794 	.word	0x08002794
 80013f4:	080027a4 	.word	0x080027a4
 80013f8:	003d0900 	.word	0x003d0900

080013fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001400:	4b02      	ldr	r3, [pc, #8]	; (800140c <HAL_RCC_GetHCLKFreq+0x10>)
 8001402:	681b      	ldr	r3, [r3, #0]
}
 8001404:	4618      	mov	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr
 800140c:	20000000 	.word	0x20000000

08001410 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001414:	f7ff fff2 	bl	80013fc <HAL_RCC_GetHCLKFreq>
 8001418:	4602      	mov	r2, r0
 800141a:	4b05      	ldr	r3, [pc, #20]	; (8001430 <HAL_RCC_GetPCLK1Freq+0x20>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	0a1b      	lsrs	r3, r3, #8
 8001420:	f003 0307 	and.w	r3, r3, #7
 8001424:	4903      	ldr	r1, [pc, #12]	; (8001434 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001426:	5ccb      	ldrb	r3, [r1, r3]
 8001428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800142c:	4618      	mov	r0, r3
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40021000 	.word	0x40021000
 8001434:	0800278c 	.word	0x0800278c

08001438 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800143c:	f7ff ffde 	bl	80013fc <HAL_RCC_GetHCLKFreq>
 8001440:	4602      	mov	r2, r0
 8001442:	4b05      	ldr	r3, [pc, #20]	; (8001458 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	0adb      	lsrs	r3, r3, #11
 8001448:	f003 0307 	and.w	r3, r3, #7
 800144c:	4903      	ldr	r1, [pc, #12]	; (800145c <HAL_RCC_GetPCLK2Freq+0x24>)
 800144e:	5ccb      	ldrb	r3, [r1, r3]
 8001450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001454:	4618      	mov	r0, r3
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40021000 	.word	0x40021000
 800145c:	0800278c 	.word	0x0800278c

08001460 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001468:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <RCC_Delay+0x34>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <RCC_Delay+0x38>)
 800146e:	fba2 2303 	umull	r2, r3, r2, r3
 8001472:	0a5b      	lsrs	r3, r3, #9
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	fb02 f303 	mul.w	r3, r2, r3
 800147a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800147c:	bf00      	nop
  }
  while (Delay --);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	1e5a      	subs	r2, r3, #1
 8001482:	60fa      	str	r2, [r7, #12]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1f9      	bne.n	800147c <RCC_Delay+0x1c>
}
 8001488:	bf00      	nop
 800148a:	bf00      	nop
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr
 8001494:	20000000 	.word	0x20000000
 8001498:	10624dd3 	.word	0x10624dd3

0800149c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e076      	b.n	800159c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d108      	bne.n	80014c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80014be:	d009      	beq.n	80014d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	61da      	str	r2, [r3, #28]
 80014c6:	e005      	b.n	80014d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d106      	bne.n	80014f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7fe ffa6 	bl	8000440 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2202      	movs	r2, #2
 80014f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800150a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800151c:	431a      	orrs	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001526:	431a      	orrs	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	431a      	orrs	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	431a      	orrs	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001544:	431a      	orrs	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800154e:	431a      	orrs	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001558:	ea42 0103 	orr.w	r1, r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001560:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	430a      	orrs	r2, r1
 800156a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	0c1a      	lsrs	r2, r3, #16
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f002 0204 	and.w	r2, r2, #4
 800157a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	69da      	ldr	r2, [r3, #28]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800158a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2201      	movs	r2, #1
 8001596:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08c      	sub	sp, #48	; 0x30
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
 80015b0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80015b2:	2301      	movs	r3, #1
 80015b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80015b6:	2300      	movs	r3, #0
 80015b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d101      	bne.n	80015ca <HAL_SPI_TransmitReceive+0x26>
 80015c6:	2302      	movs	r3, #2
 80015c8:	e198      	b.n	80018fc <HAL_SPI_TransmitReceive+0x358>
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2201      	movs	r2, #1
 80015ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80015d2:	f7ff f8ad 	bl	8000730 <HAL_GetTick>
 80015d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80015de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80015e8:	887b      	ldrh	r3, [r7, #2]
 80015ea:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80015ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d00f      	beq.n	8001614 <HAL_SPI_TransmitReceive+0x70>
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80015fa:	d107      	bne.n	800160c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d103      	bne.n	800160c <HAL_SPI_TransmitReceive+0x68>
 8001604:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001608:	2b04      	cmp	r3, #4
 800160a:	d003      	beq.n	8001614 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800160c:	2302      	movs	r3, #2
 800160e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001612:	e16d      	b.n	80018f0 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d005      	beq.n	8001626 <HAL_SPI_TransmitReceive+0x82>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d002      	beq.n	8001626 <HAL_SPI_TransmitReceive+0x82>
 8001620:	887b      	ldrh	r3, [r7, #2]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d103      	bne.n	800162e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800162c:	e160      	b.n	80018f0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b04      	cmp	r3, #4
 8001638:	d003      	beq.n	8001642 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2205      	movs	r2, #5
 800163e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2200      	movs	r2, #0
 8001646:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	887a      	ldrh	r2, [r7, #2]
 8001652:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	887a      	ldrh	r2, [r7, #2]
 8001658:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	68ba      	ldr	r2, [r7, #8]
 800165e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	887a      	ldrh	r2, [r7, #2]
 8001664:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	887a      	ldrh	r2, [r7, #2]
 800166a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2200      	movs	r2, #0
 8001670:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2200      	movs	r2, #0
 8001676:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001682:	2b40      	cmp	r3, #64	; 0x40
 8001684:	d007      	beq.n	8001696 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001694:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800169e:	d17c      	bne.n	800179a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d002      	beq.n	80016ae <HAL_SPI_TransmitReceive+0x10a>
 80016a8:	8b7b      	ldrh	r3, [r7, #26]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d16a      	bne.n	8001784 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	881a      	ldrh	r2, [r3, #0]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	1c9a      	adds	r2, r3, #2
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	3b01      	subs	r3, #1
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80016d2:	e057      	b.n	8001784 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d11b      	bne.n	800171a <HAL_SPI_TransmitReceive+0x176>
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d016      	beq.n	800171a <HAL_SPI_TransmitReceive+0x176>
 80016ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d113      	bne.n	800171a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	881a      	ldrh	r2, [r3, #0]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	1c9a      	adds	r2, r3, #2
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800170c:	b29b      	uxth	r3, r3
 800170e:	3b01      	subs	r3, #1
 8001710:	b29a      	uxth	r2, r3
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001716:	2300      	movs	r3, #0
 8001718:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	2b01      	cmp	r3, #1
 8001726:	d119      	bne.n	800175c <HAL_SPI_TransmitReceive+0x1b8>
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800172c:	b29b      	uxth	r3, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	d014      	beq.n	800175c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68da      	ldr	r2, [r3, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800173c:	b292      	uxth	r2, r2
 800173e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001744:	1c9a      	adds	r2, r3, #2
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800174e:	b29b      	uxth	r3, r3
 8001750:	3b01      	subs	r3, #1
 8001752:	b29a      	uxth	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001758:	2301      	movs	r3, #1
 800175a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800175c:	f7fe ffe8 	bl	8000730 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001768:	429a      	cmp	r2, r3
 800176a:	d80b      	bhi.n	8001784 <HAL_SPI_TransmitReceive+0x1e0>
 800176c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800176e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001772:	d007      	beq.n	8001784 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2201      	movs	r2, #1
 800177e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8001782:	e0b5      	b.n	80018f0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001788:	b29b      	uxth	r3, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1a2      	bne.n	80016d4 <HAL_SPI_TransmitReceive+0x130>
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001792:	b29b      	uxth	r3, r3
 8001794:	2b00      	cmp	r3, #0
 8001796:	d19d      	bne.n	80016d4 <HAL_SPI_TransmitReceive+0x130>
 8001798:	e080      	b.n	800189c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d002      	beq.n	80017a8 <HAL_SPI_TransmitReceive+0x204>
 80017a2:	8b7b      	ldrh	r3, [r7, #26]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d16f      	bne.n	8001888 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	330c      	adds	r3, #12
 80017b2:	7812      	ldrb	r2, [r2, #0]
 80017b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	1c5a      	adds	r2, r3, #1
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	3b01      	subs	r3, #1
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80017ce:	e05b      	b.n	8001888 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d11c      	bne.n	8001818 <HAL_SPI_TransmitReceive+0x274>
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d017      	beq.n	8001818 <HAL_SPI_TransmitReceive+0x274>
 80017e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d114      	bne.n	8001818 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	330c      	adds	r3, #12
 80017f8:	7812      	ldrb	r2, [r2, #0]
 80017fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001800:	1c5a      	adds	r2, r3, #1
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800180a:	b29b      	uxth	r3, r3
 800180c:	3b01      	subs	r3, #1
 800180e:	b29a      	uxth	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001814:	2300      	movs	r3, #0
 8001816:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b01      	cmp	r3, #1
 8001824:	d119      	bne.n	800185a <HAL_SPI_TransmitReceive+0x2b6>
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800182a:	b29b      	uxth	r3, r3
 800182c:	2b00      	cmp	r3, #0
 800182e:	d014      	beq.n	800185a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68da      	ldr	r2, [r3, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001842:	1c5a      	adds	r2, r3, #1
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800184c:	b29b      	uxth	r3, r3
 800184e:	3b01      	subs	r3, #1
 8001850:	b29a      	uxth	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001856:	2301      	movs	r3, #1
 8001858:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800185a:	f7fe ff69 	bl	8000730 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001866:	429a      	cmp	r2, r3
 8001868:	d803      	bhi.n	8001872 <HAL_SPI_TransmitReceive+0x2ce>
 800186a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800186c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001870:	d102      	bne.n	8001878 <HAL_SPI_TransmitReceive+0x2d4>
 8001872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001874:	2b00      	cmp	r3, #0
 8001876:	d107      	bne.n	8001888 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2201      	movs	r2, #1
 8001882:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8001886:	e033      	b.n	80018f0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800188c:	b29b      	uxth	r3, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	d19e      	bne.n	80017d0 <HAL_SPI_TransmitReceive+0x22c>
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001896:	b29b      	uxth	r3, r3
 8001898:	2b00      	cmp	r3, #0
 800189a:	d199      	bne.n	80017d0 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800189c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800189e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	f000 f8b7 	bl	8001a14 <SPI_EndRxTxTransaction>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d006      	beq.n	80018ba <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2220      	movs	r2, #32
 80018b6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80018b8:	e01a      	b.n	80018f0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d10a      	bne.n	80018d8 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	617b      	str	r3, [r7, #20]
 80018d6:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80018e6:	e003      	b.n	80018f0 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80018f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3730      	adds	r7, #48	; 0x30
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b088      	sub	sp, #32
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	4613      	mov	r3, r2
 8001912:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001914:	f7fe ff0c 	bl	8000730 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800191c:	1a9b      	subs	r3, r3, r2
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	4413      	add	r3, r2
 8001922:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001924:	f7fe ff04 	bl	8000730 <HAL_GetTick>
 8001928:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800192a:	4b39      	ldr	r3, [pc, #228]	; (8001a10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	015b      	lsls	r3, r3, #5
 8001930:	0d1b      	lsrs	r3, r3, #20
 8001932:	69fa      	ldr	r2, [r7, #28]
 8001934:	fb02 f303 	mul.w	r3, r2, r3
 8001938:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800193a:	e054      	b.n	80019e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001942:	d050      	beq.n	80019e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001944:	f7fe fef4 	bl	8000730 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	69fa      	ldr	r2, [r7, #28]
 8001950:	429a      	cmp	r2, r3
 8001952:	d902      	bls.n	800195a <SPI_WaitFlagStateUntilTimeout+0x56>
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d13d      	bne.n	80019d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001968:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001972:	d111      	bne.n	8001998 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800197c:	d004      	beq.n	8001988 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001986:	d107      	bne.n	8001998 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001996:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019a0:	d10f      	bne.n	80019c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2201      	movs	r2, #1
 80019c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e017      	b.n	8001a06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80019dc:	2300      	movs	r3, #0
 80019de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	4013      	ands	r3, r2
 80019f0:	68ba      	ldr	r2, [r7, #8]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	bf0c      	ite	eq
 80019f6:	2301      	moveq	r3, #1
 80019f8:	2300      	movne	r3, #0
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	461a      	mov	r2, r3
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d19b      	bne.n	800193c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3720      	adds	r7, #32
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000000 	.word	0x20000000

08001a14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af02      	add	r7, sp, #8
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	2200      	movs	r2, #0
 8001a28:	2180      	movs	r1, #128	; 0x80
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f7ff ff6a 	bl	8001904 <SPI_WaitFlagStateUntilTimeout>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d007      	beq.n	8001a46 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a3a:	f043 0220 	orr.w	r2, r3, #32
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e000      	b.n	8001a48 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e042      	b.n	8001ae8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d106      	bne.n	8001a7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7fe fd2c 	bl	80004d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2224      	movs	r2, #36	; 0x24
 8001a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68da      	ldr	r2, [r3, #12]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 f91d 	bl	8001cd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	691a      	ldr	r2, [r3, #16]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001aa8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	695a      	ldr	r2, [r3, #20]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ab8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68da      	ldr	r2, [r3, #12]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ac8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2220      	movs	r2, #32
 8001ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2220      	movs	r2, #32
 8001adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08a      	sub	sp, #40	; 0x28
 8001af4:	af02      	add	r7, sp, #8
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	603b      	str	r3, [r7, #0]
 8001afc:	4613      	mov	r3, r2
 8001afe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2b20      	cmp	r3, #32
 8001b0e:	d16d      	bne.n	8001bec <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d002      	beq.n	8001b1c <HAL_UART_Transmit+0x2c>
 8001b16:	88fb      	ldrh	r3, [r7, #6]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e066      	b.n	8001bee <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2200      	movs	r2, #0
 8001b24:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2221      	movs	r2, #33	; 0x21
 8001b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b2e:	f7fe fdff 	bl	8000730 <HAL_GetTick>
 8001b32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	88fa      	ldrh	r2, [r7, #6]
 8001b38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	88fa      	ldrh	r2, [r7, #6]
 8001b3e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b48:	d108      	bne.n	8001b5c <HAL_UART_Transmit+0x6c>
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d104      	bne.n	8001b5c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	61bb      	str	r3, [r7, #24]
 8001b5a:	e003      	b.n	8001b64 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001b64:	e02a      	b.n	8001bbc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2180      	movs	r1, #128	; 0x80
 8001b70:	68f8      	ldr	r0, [r7, #12]
 8001b72:	f000 f840 	bl	8001bf6 <UART_WaitOnFlagUntilTimeout>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e036      	b.n	8001bee <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d10b      	bne.n	8001b9e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	3302      	adds	r3, #2
 8001b9a:	61bb      	str	r3, [r7, #24]
 8001b9c:	e007      	b.n	8001bae <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	781a      	ldrb	r2, [r3, #0]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	3301      	adds	r3, #1
 8001bac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1cf      	bne.n	8001b66 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2140      	movs	r1, #64	; 0x40
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f000 f810 	bl	8001bf6 <UART_WaitOnFlagUntilTimeout>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e006      	b.n	8001bee <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2220      	movs	r2, #32
 8001be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001be8:	2300      	movs	r3, #0
 8001bea:	e000      	b.n	8001bee <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001bec:	2302      	movs	r3, #2
  }
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3720      	adds	r7, #32
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b090      	sub	sp, #64	; 0x40
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	60f8      	str	r0, [r7, #12]
 8001bfe:	60b9      	str	r1, [r7, #8]
 8001c00:	603b      	str	r3, [r7, #0]
 8001c02:	4613      	mov	r3, r2
 8001c04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c06:	e050      	b.n	8001caa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c0e:	d04c      	beq.n	8001caa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d007      	beq.n	8001c26 <UART_WaitOnFlagUntilTimeout+0x30>
 8001c16:	f7fe fd8b 	bl	8000730 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d241      	bcs.n	8001caa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	330c      	adds	r3, #12
 8001c2c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c30:	e853 3f00 	ldrex	r3, [r3]
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	330c      	adds	r3, #12
 8001c44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c46:	637a      	str	r2, [r7, #52]	; 0x34
 8001c48:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c4e:	e841 2300 	strex	r3, r2, [r1]
 8001c52:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1e5      	bne.n	8001c26 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	3314      	adds	r3, #20
 8001c60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	e853 3f00 	ldrex	r3, [r3]
 8001c68:	613b      	str	r3, [r7, #16]
   return(result);
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	f023 0301 	bic.w	r3, r3, #1
 8001c70:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	3314      	adds	r3, #20
 8001c78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c7a:	623a      	str	r2, [r7, #32]
 8001c7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c7e:	69f9      	ldr	r1, [r7, #28]
 8001c80:	6a3a      	ldr	r2, [r7, #32]
 8001c82:	e841 2300 	strex	r3, r2, [r1]
 8001c86:	61bb      	str	r3, [r7, #24]
   return(result);
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1e5      	bne.n	8001c5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2220      	movs	r2, #32
 8001c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2220      	movs	r2, #32
 8001c9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e00f      	b.n	8001cca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	68ba      	ldr	r2, [r7, #8]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	bf0c      	ite	eq
 8001cba:	2301      	moveq	r3, #1
 8001cbc:	2300      	movne	r3, #0
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d09f      	beq.n	8001c08 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3740      	adds	r7, #64	; 0x40
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
	...

08001cd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68da      	ldr	r2, [r3, #12]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689a      	ldr	r2, [r3, #8]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001d0e:	f023 030c 	bic.w	r3, r3, #12
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6812      	ldr	r2, [r2, #0]
 8001d16:	68b9      	ldr	r1, [r7, #8]
 8001d18:	430b      	orrs	r3, r1
 8001d1a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	699a      	ldr	r2, [r3, #24]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a2c      	ldr	r2, [pc, #176]	; (8001de8 <UART_SetConfig+0x114>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d103      	bne.n	8001d44 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001d3c:	f7ff fb7c 	bl	8001438 <HAL_RCC_GetPCLK2Freq>
 8001d40:	60f8      	str	r0, [r7, #12]
 8001d42:	e002      	b.n	8001d4a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001d44:	f7ff fb64 	bl	8001410 <HAL_RCC_GetPCLK1Freq>
 8001d48:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4413      	add	r3, r2
 8001d52:	009a      	lsls	r2, r3, #2
 8001d54:	441a      	add	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d60:	4a22      	ldr	r2, [pc, #136]	; (8001dec <UART_SetConfig+0x118>)
 8001d62:	fba2 2303 	umull	r2, r3, r2, r3
 8001d66:	095b      	lsrs	r3, r3, #5
 8001d68:	0119      	lsls	r1, r3, #4
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	009a      	lsls	r2, r3, #2
 8001d74:	441a      	add	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d80:	4b1a      	ldr	r3, [pc, #104]	; (8001dec <UART_SetConfig+0x118>)
 8001d82:	fba3 0302 	umull	r0, r3, r3, r2
 8001d86:	095b      	lsrs	r3, r3, #5
 8001d88:	2064      	movs	r0, #100	; 0x64
 8001d8a:	fb00 f303 	mul.w	r3, r0, r3
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	011b      	lsls	r3, r3, #4
 8001d92:	3332      	adds	r3, #50	; 0x32
 8001d94:	4a15      	ldr	r2, [pc, #84]	; (8001dec <UART_SetConfig+0x118>)
 8001d96:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9a:	095b      	lsrs	r3, r3, #5
 8001d9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001da0:	4419      	add	r1, r3
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	4613      	mov	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	009a      	lsls	r2, r3, #2
 8001dac:	441a      	add	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001db8:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <UART_SetConfig+0x118>)
 8001dba:	fba3 0302 	umull	r0, r3, r3, r2
 8001dbe:	095b      	lsrs	r3, r3, #5
 8001dc0:	2064      	movs	r0, #100	; 0x64
 8001dc2:	fb00 f303 	mul.w	r3, r0, r3
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	011b      	lsls	r3, r3, #4
 8001dca:	3332      	adds	r3, #50	; 0x32
 8001dcc:	4a07      	ldr	r2, [pc, #28]	; (8001dec <UART_SetConfig+0x118>)
 8001dce:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd2:	095b      	lsrs	r3, r3, #5
 8001dd4:	f003 020f 	and.w	r2, r3, #15
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	440a      	add	r2, r1
 8001dde:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001de0:	bf00      	nop
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40013800 	.word	0x40013800
 8001dec:	51eb851f 	.word	0x51eb851f

08001df0 <siprintf>:
 8001df0:	b40e      	push	{r1, r2, r3}
 8001df2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001df6:	b500      	push	{lr}
 8001df8:	b09c      	sub	sp, #112	; 0x70
 8001dfa:	ab1d      	add	r3, sp, #116	; 0x74
 8001dfc:	9002      	str	r0, [sp, #8]
 8001dfe:	9006      	str	r0, [sp, #24]
 8001e00:	9107      	str	r1, [sp, #28]
 8001e02:	9104      	str	r1, [sp, #16]
 8001e04:	4808      	ldr	r0, [pc, #32]	; (8001e28 <siprintf+0x38>)
 8001e06:	4909      	ldr	r1, [pc, #36]	; (8001e2c <siprintf+0x3c>)
 8001e08:	f853 2b04 	ldr.w	r2, [r3], #4
 8001e0c:	9105      	str	r1, [sp, #20]
 8001e0e:	6800      	ldr	r0, [r0, #0]
 8001e10:	a902      	add	r1, sp, #8
 8001e12:	9301      	str	r3, [sp, #4]
 8001e14:	f000 f98e 	bl	8002134 <_svfiprintf_r>
 8001e18:	2200      	movs	r2, #0
 8001e1a:	9b02      	ldr	r3, [sp, #8]
 8001e1c:	701a      	strb	r2, [r3, #0]
 8001e1e:	b01c      	add	sp, #112	; 0x70
 8001e20:	f85d eb04 	ldr.w	lr, [sp], #4
 8001e24:	b003      	add	sp, #12
 8001e26:	4770      	bx	lr
 8001e28:	20000058 	.word	0x20000058
 8001e2c:	ffff0208 	.word	0xffff0208

08001e30 <memset>:
 8001e30:	4603      	mov	r3, r0
 8001e32:	4402      	add	r2, r0
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d100      	bne.n	8001e3a <memset+0xa>
 8001e38:	4770      	bx	lr
 8001e3a:	f803 1b01 	strb.w	r1, [r3], #1
 8001e3e:	e7f9      	b.n	8001e34 <memset+0x4>

08001e40 <__errno>:
 8001e40:	4b01      	ldr	r3, [pc, #4]	; (8001e48 <__errno+0x8>)
 8001e42:	6818      	ldr	r0, [r3, #0]
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	20000058 	.word	0x20000058

08001e4c <__libc_init_array>:
 8001e4c:	b570      	push	{r4, r5, r6, lr}
 8001e4e:	2600      	movs	r6, #0
 8001e50:	4d0c      	ldr	r5, [pc, #48]	; (8001e84 <__libc_init_array+0x38>)
 8001e52:	4c0d      	ldr	r4, [pc, #52]	; (8001e88 <__libc_init_array+0x3c>)
 8001e54:	1b64      	subs	r4, r4, r5
 8001e56:	10a4      	asrs	r4, r4, #2
 8001e58:	42a6      	cmp	r6, r4
 8001e5a:	d109      	bne.n	8001e70 <__libc_init_array+0x24>
 8001e5c:	f000 fc7a 	bl	8002754 <_init>
 8001e60:	2600      	movs	r6, #0
 8001e62:	4d0a      	ldr	r5, [pc, #40]	; (8001e8c <__libc_init_array+0x40>)
 8001e64:	4c0a      	ldr	r4, [pc, #40]	; (8001e90 <__libc_init_array+0x44>)
 8001e66:	1b64      	subs	r4, r4, r5
 8001e68:	10a4      	asrs	r4, r4, #2
 8001e6a:	42a6      	cmp	r6, r4
 8001e6c:	d105      	bne.n	8001e7a <__libc_init_array+0x2e>
 8001e6e:	bd70      	pop	{r4, r5, r6, pc}
 8001e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e74:	4798      	blx	r3
 8001e76:	3601      	adds	r6, #1
 8001e78:	e7ee      	b.n	8001e58 <__libc_init_array+0xc>
 8001e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e7e:	4798      	blx	r3
 8001e80:	3601      	adds	r6, #1
 8001e82:	e7f2      	b.n	8001e6a <__libc_init_array+0x1e>
 8001e84:	080027dc 	.word	0x080027dc
 8001e88:	080027dc 	.word	0x080027dc
 8001e8c:	080027dc 	.word	0x080027dc
 8001e90:	080027e0 	.word	0x080027e0

08001e94 <__retarget_lock_acquire_recursive>:
 8001e94:	4770      	bx	lr

08001e96 <__retarget_lock_release_recursive>:
 8001e96:	4770      	bx	lr

08001e98 <_free_r>:
 8001e98:	b538      	push	{r3, r4, r5, lr}
 8001e9a:	4605      	mov	r5, r0
 8001e9c:	2900      	cmp	r1, #0
 8001e9e:	d040      	beq.n	8001f22 <_free_r+0x8a>
 8001ea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ea4:	1f0c      	subs	r4, r1, #4
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	bfb8      	it	lt
 8001eaa:	18e4      	addlt	r4, r4, r3
 8001eac:	f000 f8dc 	bl	8002068 <__malloc_lock>
 8001eb0:	4a1c      	ldr	r2, [pc, #112]	; (8001f24 <_free_r+0x8c>)
 8001eb2:	6813      	ldr	r3, [r2, #0]
 8001eb4:	b933      	cbnz	r3, 8001ec4 <_free_r+0x2c>
 8001eb6:	6063      	str	r3, [r4, #4]
 8001eb8:	6014      	str	r4, [r2, #0]
 8001eba:	4628      	mov	r0, r5
 8001ebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ec0:	f000 b8d8 	b.w	8002074 <__malloc_unlock>
 8001ec4:	42a3      	cmp	r3, r4
 8001ec6:	d908      	bls.n	8001eda <_free_r+0x42>
 8001ec8:	6820      	ldr	r0, [r4, #0]
 8001eca:	1821      	adds	r1, r4, r0
 8001ecc:	428b      	cmp	r3, r1
 8001ece:	bf01      	itttt	eq
 8001ed0:	6819      	ldreq	r1, [r3, #0]
 8001ed2:	685b      	ldreq	r3, [r3, #4]
 8001ed4:	1809      	addeq	r1, r1, r0
 8001ed6:	6021      	streq	r1, [r4, #0]
 8001ed8:	e7ed      	b.n	8001eb6 <_free_r+0x1e>
 8001eda:	461a      	mov	r2, r3
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	b10b      	cbz	r3, 8001ee4 <_free_r+0x4c>
 8001ee0:	42a3      	cmp	r3, r4
 8001ee2:	d9fa      	bls.n	8001eda <_free_r+0x42>
 8001ee4:	6811      	ldr	r1, [r2, #0]
 8001ee6:	1850      	adds	r0, r2, r1
 8001ee8:	42a0      	cmp	r0, r4
 8001eea:	d10b      	bne.n	8001f04 <_free_r+0x6c>
 8001eec:	6820      	ldr	r0, [r4, #0]
 8001eee:	4401      	add	r1, r0
 8001ef0:	1850      	adds	r0, r2, r1
 8001ef2:	4283      	cmp	r3, r0
 8001ef4:	6011      	str	r1, [r2, #0]
 8001ef6:	d1e0      	bne.n	8001eba <_free_r+0x22>
 8001ef8:	6818      	ldr	r0, [r3, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	4408      	add	r0, r1
 8001efe:	6010      	str	r0, [r2, #0]
 8001f00:	6053      	str	r3, [r2, #4]
 8001f02:	e7da      	b.n	8001eba <_free_r+0x22>
 8001f04:	d902      	bls.n	8001f0c <_free_r+0x74>
 8001f06:	230c      	movs	r3, #12
 8001f08:	602b      	str	r3, [r5, #0]
 8001f0a:	e7d6      	b.n	8001eba <_free_r+0x22>
 8001f0c:	6820      	ldr	r0, [r4, #0]
 8001f0e:	1821      	adds	r1, r4, r0
 8001f10:	428b      	cmp	r3, r1
 8001f12:	bf01      	itttt	eq
 8001f14:	6819      	ldreq	r1, [r3, #0]
 8001f16:	685b      	ldreq	r3, [r3, #4]
 8001f18:	1809      	addeq	r1, r1, r0
 8001f1a:	6021      	streq	r1, [r4, #0]
 8001f1c:	6063      	str	r3, [r4, #4]
 8001f1e:	6054      	str	r4, [r2, #4]
 8001f20:	e7cb      	b.n	8001eba <_free_r+0x22>
 8001f22:	bd38      	pop	{r3, r4, r5, pc}
 8001f24:	20000260 	.word	0x20000260

08001f28 <sbrk_aligned>:
 8001f28:	b570      	push	{r4, r5, r6, lr}
 8001f2a:	4e0e      	ldr	r6, [pc, #56]	; (8001f64 <sbrk_aligned+0x3c>)
 8001f2c:	460c      	mov	r4, r1
 8001f2e:	6831      	ldr	r1, [r6, #0]
 8001f30:	4605      	mov	r5, r0
 8001f32:	b911      	cbnz	r1, 8001f3a <sbrk_aligned+0x12>
 8001f34:	f000 fbaa 	bl	800268c <_sbrk_r>
 8001f38:	6030      	str	r0, [r6, #0]
 8001f3a:	4621      	mov	r1, r4
 8001f3c:	4628      	mov	r0, r5
 8001f3e:	f000 fba5 	bl	800268c <_sbrk_r>
 8001f42:	1c43      	adds	r3, r0, #1
 8001f44:	d00a      	beq.n	8001f5c <sbrk_aligned+0x34>
 8001f46:	1cc4      	adds	r4, r0, #3
 8001f48:	f024 0403 	bic.w	r4, r4, #3
 8001f4c:	42a0      	cmp	r0, r4
 8001f4e:	d007      	beq.n	8001f60 <sbrk_aligned+0x38>
 8001f50:	1a21      	subs	r1, r4, r0
 8001f52:	4628      	mov	r0, r5
 8001f54:	f000 fb9a 	bl	800268c <_sbrk_r>
 8001f58:	3001      	adds	r0, #1
 8001f5a:	d101      	bne.n	8001f60 <sbrk_aligned+0x38>
 8001f5c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001f60:	4620      	mov	r0, r4
 8001f62:	bd70      	pop	{r4, r5, r6, pc}
 8001f64:	20000264 	.word	0x20000264

08001f68 <_malloc_r>:
 8001f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f6c:	1ccd      	adds	r5, r1, #3
 8001f6e:	f025 0503 	bic.w	r5, r5, #3
 8001f72:	3508      	adds	r5, #8
 8001f74:	2d0c      	cmp	r5, #12
 8001f76:	bf38      	it	cc
 8001f78:	250c      	movcc	r5, #12
 8001f7a:	2d00      	cmp	r5, #0
 8001f7c:	4607      	mov	r7, r0
 8001f7e:	db01      	blt.n	8001f84 <_malloc_r+0x1c>
 8001f80:	42a9      	cmp	r1, r5
 8001f82:	d905      	bls.n	8001f90 <_malloc_r+0x28>
 8001f84:	230c      	movs	r3, #12
 8001f86:	2600      	movs	r6, #0
 8001f88:	603b      	str	r3, [r7, #0]
 8001f8a:	4630      	mov	r0, r6
 8001f8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002064 <_malloc_r+0xfc>
 8001f94:	f000 f868 	bl	8002068 <__malloc_lock>
 8001f98:	f8d8 3000 	ldr.w	r3, [r8]
 8001f9c:	461c      	mov	r4, r3
 8001f9e:	bb5c      	cbnz	r4, 8001ff8 <_malloc_r+0x90>
 8001fa0:	4629      	mov	r1, r5
 8001fa2:	4638      	mov	r0, r7
 8001fa4:	f7ff ffc0 	bl	8001f28 <sbrk_aligned>
 8001fa8:	1c43      	adds	r3, r0, #1
 8001faa:	4604      	mov	r4, r0
 8001fac:	d155      	bne.n	800205a <_malloc_r+0xf2>
 8001fae:	f8d8 4000 	ldr.w	r4, [r8]
 8001fb2:	4626      	mov	r6, r4
 8001fb4:	2e00      	cmp	r6, #0
 8001fb6:	d145      	bne.n	8002044 <_malloc_r+0xdc>
 8001fb8:	2c00      	cmp	r4, #0
 8001fba:	d048      	beq.n	800204e <_malloc_r+0xe6>
 8001fbc:	6823      	ldr	r3, [r4, #0]
 8001fbe:	4631      	mov	r1, r6
 8001fc0:	4638      	mov	r0, r7
 8001fc2:	eb04 0903 	add.w	r9, r4, r3
 8001fc6:	f000 fb61 	bl	800268c <_sbrk_r>
 8001fca:	4581      	cmp	r9, r0
 8001fcc:	d13f      	bne.n	800204e <_malloc_r+0xe6>
 8001fce:	6821      	ldr	r1, [r4, #0]
 8001fd0:	4638      	mov	r0, r7
 8001fd2:	1a6d      	subs	r5, r5, r1
 8001fd4:	4629      	mov	r1, r5
 8001fd6:	f7ff ffa7 	bl	8001f28 <sbrk_aligned>
 8001fda:	3001      	adds	r0, #1
 8001fdc:	d037      	beq.n	800204e <_malloc_r+0xe6>
 8001fde:	6823      	ldr	r3, [r4, #0]
 8001fe0:	442b      	add	r3, r5
 8001fe2:	6023      	str	r3, [r4, #0]
 8001fe4:	f8d8 3000 	ldr.w	r3, [r8]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d038      	beq.n	800205e <_malloc_r+0xf6>
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	42a2      	cmp	r2, r4
 8001ff0:	d12b      	bne.n	800204a <_malloc_r+0xe2>
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	e00f      	b.n	8002018 <_malloc_r+0xb0>
 8001ff8:	6822      	ldr	r2, [r4, #0]
 8001ffa:	1b52      	subs	r2, r2, r5
 8001ffc:	d41f      	bmi.n	800203e <_malloc_r+0xd6>
 8001ffe:	2a0b      	cmp	r2, #11
 8002000:	d917      	bls.n	8002032 <_malloc_r+0xca>
 8002002:	1961      	adds	r1, r4, r5
 8002004:	42a3      	cmp	r3, r4
 8002006:	6025      	str	r5, [r4, #0]
 8002008:	bf18      	it	ne
 800200a:	6059      	strne	r1, [r3, #4]
 800200c:	6863      	ldr	r3, [r4, #4]
 800200e:	bf08      	it	eq
 8002010:	f8c8 1000 	streq.w	r1, [r8]
 8002014:	5162      	str	r2, [r4, r5]
 8002016:	604b      	str	r3, [r1, #4]
 8002018:	4638      	mov	r0, r7
 800201a:	f104 060b 	add.w	r6, r4, #11
 800201e:	f000 f829 	bl	8002074 <__malloc_unlock>
 8002022:	f026 0607 	bic.w	r6, r6, #7
 8002026:	1d23      	adds	r3, r4, #4
 8002028:	1af2      	subs	r2, r6, r3
 800202a:	d0ae      	beq.n	8001f8a <_malloc_r+0x22>
 800202c:	1b9b      	subs	r3, r3, r6
 800202e:	50a3      	str	r3, [r4, r2]
 8002030:	e7ab      	b.n	8001f8a <_malloc_r+0x22>
 8002032:	42a3      	cmp	r3, r4
 8002034:	6862      	ldr	r2, [r4, #4]
 8002036:	d1dd      	bne.n	8001ff4 <_malloc_r+0x8c>
 8002038:	f8c8 2000 	str.w	r2, [r8]
 800203c:	e7ec      	b.n	8002018 <_malloc_r+0xb0>
 800203e:	4623      	mov	r3, r4
 8002040:	6864      	ldr	r4, [r4, #4]
 8002042:	e7ac      	b.n	8001f9e <_malloc_r+0x36>
 8002044:	4634      	mov	r4, r6
 8002046:	6876      	ldr	r6, [r6, #4]
 8002048:	e7b4      	b.n	8001fb4 <_malloc_r+0x4c>
 800204a:	4613      	mov	r3, r2
 800204c:	e7cc      	b.n	8001fe8 <_malloc_r+0x80>
 800204e:	230c      	movs	r3, #12
 8002050:	4638      	mov	r0, r7
 8002052:	603b      	str	r3, [r7, #0]
 8002054:	f000 f80e 	bl	8002074 <__malloc_unlock>
 8002058:	e797      	b.n	8001f8a <_malloc_r+0x22>
 800205a:	6025      	str	r5, [r4, #0]
 800205c:	e7dc      	b.n	8002018 <_malloc_r+0xb0>
 800205e:	605b      	str	r3, [r3, #4]
 8002060:	deff      	udf	#255	; 0xff
 8002062:	bf00      	nop
 8002064:	20000260 	.word	0x20000260

08002068 <__malloc_lock>:
 8002068:	4801      	ldr	r0, [pc, #4]	; (8002070 <__malloc_lock+0x8>)
 800206a:	f7ff bf13 	b.w	8001e94 <__retarget_lock_acquire_recursive>
 800206e:	bf00      	nop
 8002070:	2000025c 	.word	0x2000025c

08002074 <__malloc_unlock>:
 8002074:	4801      	ldr	r0, [pc, #4]	; (800207c <__malloc_unlock+0x8>)
 8002076:	f7ff bf0e 	b.w	8001e96 <__retarget_lock_release_recursive>
 800207a:	bf00      	nop
 800207c:	2000025c 	.word	0x2000025c

08002080 <__ssputs_r>:
 8002080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002084:	461f      	mov	r7, r3
 8002086:	688e      	ldr	r6, [r1, #8]
 8002088:	4682      	mov	sl, r0
 800208a:	42be      	cmp	r6, r7
 800208c:	460c      	mov	r4, r1
 800208e:	4690      	mov	r8, r2
 8002090:	680b      	ldr	r3, [r1, #0]
 8002092:	d82c      	bhi.n	80020ee <__ssputs_r+0x6e>
 8002094:	898a      	ldrh	r2, [r1, #12]
 8002096:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800209a:	d026      	beq.n	80020ea <__ssputs_r+0x6a>
 800209c:	6965      	ldr	r5, [r4, #20]
 800209e:	6909      	ldr	r1, [r1, #16]
 80020a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80020a4:	eba3 0901 	sub.w	r9, r3, r1
 80020a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80020ac:	1c7b      	adds	r3, r7, #1
 80020ae:	444b      	add	r3, r9
 80020b0:	106d      	asrs	r5, r5, #1
 80020b2:	429d      	cmp	r5, r3
 80020b4:	bf38      	it	cc
 80020b6:	461d      	movcc	r5, r3
 80020b8:	0553      	lsls	r3, r2, #21
 80020ba:	d527      	bpl.n	800210c <__ssputs_r+0x8c>
 80020bc:	4629      	mov	r1, r5
 80020be:	f7ff ff53 	bl	8001f68 <_malloc_r>
 80020c2:	4606      	mov	r6, r0
 80020c4:	b360      	cbz	r0, 8002120 <__ssputs_r+0xa0>
 80020c6:	464a      	mov	r2, r9
 80020c8:	6921      	ldr	r1, [r4, #16]
 80020ca:	f000 fafd 	bl	80026c8 <memcpy>
 80020ce:	89a3      	ldrh	r3, [r4, #12]
 80020d0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80020d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020d8:	81a3      	strh	r3, [r4, #12]
 80020da:	6126      	str	r6, [r4, #16]
 80020dc:	444e      	add	r6, r9
 80020de:	6026      	str	r6, [r4, #0]
 80020e0:	463e      	mov	r6, r7
 80020e2:	6165      	str	r5, [r4, #20]
 80020e4:	eba5 0509 	sub.w	r5, r5, r9
 80020e8:	60a5      	str	r5, [r4, #8]
 80020ea:	42be      	cmp	r6, r7
 80020ec:	d900      	bls.n	80020f0 <__ssputs_r+0x70>
 80020ee:	463e      	mov	r6, r7
 80020f0:	4632      	mov	r2, r6
 80020f2:	4641      	mov	r1, r8
 80020f4:	6820      	ldr	r0, [r4, #0]
 80020f6:	f000 faaf 	bl	8002658 <memmove>
 80020fa:	2000      	movs	r0, #0
 80020fc:	68a3      	ldr	r3, [r4, #8]
 80020fe:	1b9b      	subs	r3, r3, r6
 8002100:	60a3      	str	r3, [r4, #8]
 8002102:	6823      	ldr	r3, [r4, #0]
 8002104:	4433      	add	r3, r6
 8002106:	6023      	str	r3, [r4, #0]
 8002108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800210c:	462a      	mov	r2, r5
 800210e:	f000 fae9 	bl	80026e4 <_realloc_r>
 8002112:	4606      	mov	r6, r0
 8002114:	2800      	cmp	r0, #0
 8002116:	d1e0      	bne.n	80020da <__ssputs_r+0x5a>
 8002118:	4650      	mov	r0, sl
 800211a:	6921      	ldr	r1, [r4, #16]
 800211c:	f7ff febc 	bl	8001e98 <_free_r>
 8002120:	230c      	movs	r3, #12
 8002122:	f8ca 3000 	str.w	r3, [sl]
 8002126:	89a3      	ldrh	r3, [r4, #12]
 8002128:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800212c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002130:	81a3      	strh	r3, [r4, #12]
 8002132:	e7e9      	b.n	8002108 <__ssputs_r+0x88>

08002134 <_svfiprintf_r>:
 8002134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002138:	4698      	mov	r8, r3
 800213a:	898b      	ldrh	r3, [r1, #12]
 800213c:	4607      	mov	r7, r0
 800213e:	061b      	lsls	r3, r3, #24
 8002140:	460d      	mov	r5, r1
 8002142:	4614      	mov	r4, r2
 8002144:	b09d      	sub	sp, #116	; 0x74
 8002146:	d50e      	bpl.n	8002166 <_svfiprintf_r+0x32>
 8002148:	690b      	ldr	r3, [r1, #16]
 800214a:	b963      	cbnz	r3, 8002166 <_svfiprintf_r+0x32>
 800214c:	2140      	movs	r1, #64	; 0x40
 800214e:	f7ff ff0b 	bl	8001f68 <_malloc_r>
 8002152:	6028      	str	r0, [r5, #0]
 8002154:	6128      	str	r0, [r5, #16]
 8002156:	b920      	cbnz	r0, 8002162 <_svfiprintf_r+0x2e>
 8002158:	230c      	movs	r3, #12
 800215a:	603b      	str	r3, [r7, #0]
 800215c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002160:	e0d0      	b.n	8002304 <_svfiprintf_r+0x1d0>
 8002162:	2340      	movs	r3, #64	; 0x40
 8002164:	616b      	str	r3, [r5, #20]
 8002166:	2300      	movs	r3, #0
 8002168:	9309      	str	r3, [sp, #36]	; 0x24
 800216a:	2320      	movs	r3, #32
 800216c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002170:	2330      	movs	r3, #48	; 0x30
 8002172:	f04f 0901 	mov.w	r9, #1
 8002176:	f8cd 800c 	str.w	r8, [sp, #12]
 800217a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800231c <_svfiprintf_r+0x1e8>
 800217e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002182:	4623      	mov	r3, r4
 8002184:	469a      	mov	sl, r3
 8002186:	f813 2b01 	ldrb.w	r2, [r3], #1
 800218a:	b10a      	cbz	r2, 8002190 <_svfiprintf_r+0x5c>
 800218c:	2a25      	cmp	r2, #37	; 0x25
 800218e:	d1f9      	bne.n	8002184 <_svfiprintf_r+0x50>
 8002190:	ebba 0b04 	subs.w	fp, sl, r4
 8002194:	d00b      	beq.n	80021ae <_svfiprintf_r+0x7a>
 8002196:	465b      	mov	r3, fp
 8002198:	4622      	mov	r2, r4
 800219a:	4629      	mov	r1, r5
 800219c:	4638      	mov	r0, r7
 800219e:	f7ff ff6f 	bl	8002080 <__ssputs_r>
 80021a2:	3001      	adds	r0, #1
 80021a4:	f000 80a9 	beq.w	80022fa <_svfiprintf_r+0x1c6>
 80021a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80021aa:	445a      	add	r2, fp
 80021ac:	9209      	str	r2, [sp, #36]	; 0x24
 80021ae:	f89a 3000 	ldrb.w	r3, [sl]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 80a1 	beq.w	80022fa <_svfiprintf_r+0x1c6>
 80021b8:	2300      	movs	r3, #0
 80021ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80021c2:	f10a 0a01 	add.w	sl, sl, #1
 80021c6:	9304      	str	r3, [sp, #16]
 80021c8:	9307      	str	r3, [sp, #28]
 80021ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80021ce:	931a      	str	r3, [sp, #104]	; 0x68
 80021d0:	4654      	mov	r4, sl
 80021d2:	2205      	movs	r2, #5
 80021d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80021d8:	4850      	ldr	r0, [pc, #320]	; (800231c <_svfiprintf_r+0x1e8>)
 80021da:	f000 fa67 	bl	80026ac <memchr>
 80021de:	9a04      	ldr	r2, [sp, #16]
 80021e0:	b9d8      	cbnz	r0, 800221a <_svfiprintf_r+0xe6>
 80021e2:	06d0      	lsls	r0, r2, #27
 80021e4:	bf44      	itt	mi
 80021e6:	2320      	movmi	r3, #32
 80021e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80021ec:	0711      	lsls	r1, r2, #28
 80021ee:	bf44      	itt	mi
 80021f0:	232b      	movmi	r3, #43	; 0x2b
 80021f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80021f6:	f89a 3000 	ldrb.w	r3, [sl]
 80021fa:	2b2a      	cmp	r3, #42	; 0x2a
 80021fc:	d015      	beq.n	800222a <_svfiprintf_r+0xf6>
 80021fe:	4654      	mov	r4, sl
 8002200:	2000      	movs	r0, #0
 8002202:	f04f 0c0a 	mov.w	ip, #10
 8002206:	9a07      	ldr	r2, [sp, #28]
 8002208:	4621      	mov	r1, r4
 800220a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800220e:	3b30      	subs	r3, #48	; 0x30
 8002210:	2b09      	cmp	r3, #9
 8002212:	d94d      	bls.n	80022b0 <_svfiprintf_r+0x17c>
 8002214:	b1b0      	cbz	r0, 8002244 <_svfiprintf_r+0x110>
 8002216:	9207      	str	r2, [sp, #28]
 8002218:	e014      	b.n	8002244 <_svfiprintf_r+0x110>
 800221a:	eba0 0308 	sub.w	r3, r0, r8
 800221e:	fa09 f303 	lsl.w	r3, r9, r3
 8002222:	4313      	orrs	r3, r2
 8002224:	46a2      	mov	sl, r4
 8002226:	9304      	str	r3, [sp, #16]
 8002228:	e7d2      	b.n	80021d0 <_svfiprintf_r+0x9c>
 800222a:	9b03      	ldr	r3, [sp, #12]
 800222c:	1d19      	adds	r1, r3, #4
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	9103      	str	r1, [sp, #12]
 8002232:	2b00      	cmp	r3, #0
 8002234:	bfbb      	ittet	lt
 8002236:	425b      	neglt	r3, r3
 8002238:	f042 0202 	orrlt.w	r2, r2, #2
 800223c:	9307      	strge	r3, [sp, #28]
 800223e:	9307      	strlt	r3, [sp, #28]
 8002240:	bfb8      	it	lt
 8002242:	9204      	strlt	r2, [sp, #16]
 8002244:	7823      	ldrb	r3, [r4, #0]
 8002246:	2b2e      	cmp	r3, #46	; 0x2e
 8002248:	d10c      	bne.n	8002264 <_svfiprintf_r+0x130>
 800224a:	7863      	ldrb	r3, [r4, #1]
 800224c:	2b2a      	cmp	r3, #42	; 0x2a
 800224e:	d134      	bne.n	80022ba <_svfiprintf_r+0x186>
 8002250:	9b03      	ldr	r3, [sp, #12]
 8002252:	3402      	adds	r4, #2
 8002254:	1d1a      	adds	r2, r3, #4
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	9203      	str	r2, [sp, #12]
 800225a:	2b00      	cmp	r3, #0
 800225c:	bfb8      	it	lt
 800225e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002262:	9305      	str	r3, [sp, #20]
 8002264:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8002320 <_svfiprintf_r+0x1ec>
 8002268:	2203      	movs	r2, #3
 800226a:	4650      	mov	r0, sl
 800226c:	7821      	ldrb	r1, [r4, #0]
 800226e:	f000 fa1d 	bl	80026ac <memchr>
 8002272:	b138      	cbz	r0, 8002284 <_svfiprintf_r+0x150>
 8002274:	2240      	movs	r2, #64	; 0x40
 8002276:	9b04      	ldr	r3, [sp, #16]
 8002278:	eba0 000a 	sub.w	r0, r0, sl
 800227c:	4082      	lsls	r2, r0
 800227e:	4313      	orrs	r3, r2
 8002280:	3401      	adds	r4, #1
 8002282:	9304      	str	r3, [sp, #16]
 8002284:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002288:	2206      	movs	r2, #6
 800228a:	4826      	ldr	r0, [pc, #152]	; (8002324 <_svfiprintf_r+0x1f0>)
 800228c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002290:	f000 fa0c 	bl	80026ac <memchr>
 8002294:	2800      	cmp	r0, #0
 8002296:	d038      	beq.n	800230a <_svfiprintf_r+0x1d6>
 8002298:	4b23      	ldr	r3, [pc, #140]	; (8002328 <_svfiprintf_r+0x1f4>)
 800229a:	bb1b      	cbnz	r3, 80022e4 <_svfiprintf_r+0x1b0>
 800229c:	9b03      	ldr	r3, [sp, #12]
 800229e:	3307      	adds	r3, #7
 80022a0:	f023 0307 	bic.w	r3, r3, #7
 80022a4:	3308      	adds	r3, #8
 80022a6:	9303      	str	r3, [sp, #12]
 80022a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80022aa:	4433      	add	r3, r6
 80022ac:	9309      	str	r3, [sp, #36]	; 0x24
 80022ae:	e768      	b.n	8002182 <_svfiprintf_r+0x4e>
 80022b0:	460c      	mov	r4, r1
 80022b2:	2001      	movs	r0, #1
 80022b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80022b8:	e7a6      	b.n	8002208 <_svfiprintf_r+0xd4>
 80022ba:	2300      	movs	r3, #0
 80022bc:	f04f 0c0a 	mov.w	ip, #10
 80022c0:	4619      	mov	r1, r3
 80022c2:	3401      	adds	r4, #1
 80022c4:	9305      	str	r3, [sp, #20]
 80022c6:	4620      	mov	r0, r4
 80022c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80022cc:	3a30      	subs	r2, #48	; 0x30
 80022ce:	2a09      	cmp	r2, #9
 80022d0:	d903      	bls.n	80022da <_svfiprintf_r+0x1a6>
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0c6      	beq.n	8002264 <_svfiprintf_r+0x130>
 80022d6:	9105      	str	r1, [sp, #20]
 80022d8:	e7c4      	b.n	8002264 <_svfiprintf_r+0x130>
 80022da:	4604      	mov	r4, r0
 80022dc:	2301      	movs	r3, #1
 80022de:	fb0c 2101 	mla	r1, ip, r1, r2
 80022e2:	e7f0      	b.n	80022c6 <_svfiprintf_r+0x192>
 80022e4:	ab03      	add	r3, sp, #12
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	462a      	mov	r2, r5
 80022ea:	4638      	mov	r0, r7
 80022ec:	4b0f      	ldr	r3, [pc, #60]	; (800232c <_svfiprintf_r+0x1f8>)
 80022ee:	a904      	add	r1, sp, #16
 80022f0:	f3af 8000 	nop.w
 80022f4:	1c42      	adds	r2, r0, #1
 80022f6:	4606      	mov	r6, r0
 80022f8:	d1d6      	bne.n	80022a8 <_svfiprintf_r+0x174>
 80022fa:	89ab      	ldrh	r3, [r5, #12]
 80022fc:	065b      	lsls	r3, r3, #25
 80022fe:	f53f af2d 	bmi.w	800215c <_svfiprintf_r+0x28>
 8002302:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002304:	b01d      	add	sp, #116	; 0x74
 8002306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800230a:	ab03      	add	r3, sp, #12
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	462a      	mov	r2, r5
 8002310:	4638      	mov	r0, r7
 8002312:	4b06      	ldr	r3, [pc, #24]	; (800232c <_svfiprintf_r+0x1f8>)
 8002314:	a904      	add	r1, sp, #16
 8002316:	f000 f87d 	bl	8002414 <_printf_i>
 800231a:	e7eb      	b.n	80022f4 <_svfiprintf_r+0x1c0>
 800231c:	080027a6 	.word	0x080027a6
 8002320:	080027ac 	.word	0x080027ac
 8002324:	080027b0 	.word	0x080027b0
 8002328:	00000000 	.word	0x00000000
 800232c:	08002081 	.word	0x08002081

08002330 <_printf_common>:
 8002330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002334:	4616      	mov	r6, r2
 8002336:	4699      	mov	r9, r3
 8002338:	688a      	ldr	r2, [r1, #8]
 800233a:	690b      	ldr	r3, [r1, #16]
 800233c:	4607      	mov	r7, r0
 800233e:	4293      	cmp	r3, r2
 8002340:	bfb8      	it	lt
 8002342:	4613      	movlt	r3, r2
 8002344:	6033      	str	r3, [r6, #0]
 8002346:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800234a:	460c      	mov	r4, r1
 800234c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002350:	b10a      	cbz	r2, 8002356 <_printf_common+0x26>
 8002352:	3301      	adds	r3, #1
 8002354:	6033      	str	r3, [r6, #0]
 8002356:	6823      	ldr	r3, [r4, #0]
 8002358:	0699      	lsls	r1, r3, #26
 800235a:	bf42      	ittt	mi
 800235c:	6833      	ldrmi	r3, [r6, #0]
 800235e:	3302      	addmi	r3, #2
 8002360:	6033      	strmi	r3, [r6, #0]
 8002362:	6825      	ldr	r5, [r4, #0]
 8002364:	f015 0506 	ands.w	r5, r5, #6
 8002368:	d106      	bne.n	8002378 <_printf_common+0x48>
 800236a:	f104 0a19 	add.w	sl, r4, #25
 800236e:	68e3      	ldr	r3, [r4, #12]
 8002370:	6832      	ldr	r2, [r6, #0]
 8002372:	1a9b      	subs	r3, r3, r2
 8002374:	42ab      	cmp	r3, r5
 8002376:	dc2b      	bgt.n	80023d0 <_printf_common+0xa0>
 8002378:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800237c:	1e13      	subs	r3, r2, #0
 800237e:	6822      	ldr	r2, [r4, #0]
 8002380:	bf18      	it	ne
 8002382:	2301      	movne	r3, #1
 8002384:	0692      	lsls	r2, r2, #26
 8002386:	d430      	bmi.n	80023ea <_printf_common+0xba>
 8002388:	4649      	mov	r1, r9
 800238a:	4638      	mov	r0, r7
 800238c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002390:	47c0      	blx	r8
 8002392:	3001      	adds	r0, #1
 8002394:	d023      	beq.n	80023de <_printf_common+0xae>
 8002396:	6823      	ldr	r3, [r4, #0]
 8002398:	6922      	ldr	r2, [r4, #16]
 800239a:	f003 0306 	and.w	r3, r3, #6
 800239e:	2b04      	cmp	r3, #4
 80023a0:	bf14      	ite	ne
 80023a2:	2500      	movne	r5, #0
 80023a4:	6833      	ldreq	r3, [r6, #0]
 80023a6:	f04f 0600 	mov.w	r6, #0
 80023aa:	bf08      	it	eq
 80023ac:	68e5      	ldreq	r5, [r4, #12]
 80023ae:	f104 041a 	add.w	r4, r4, #26
 80023b2:	bf08      	it	eq
 80023b4:	1aed      	subeq	r5, r5, r3
 80023b6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80023ba:	bf08      	it	eq
 80023bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80023c0:	4293      	cmp	r3, r2
 80023c2:	bfc4      	itt	gt
 80023c4:	1a9b      	subgt	r3, r3, r2
 80023c6:	18ed      	addgt	r5, r5, r3
 80023c8:	42b5      	cmp	r5, r6
 80023ca:	d11a      	bne.n	8002402 <_printf_common+0xd2>
 80023cc:	2000      	movs	r0, #0
 80023ce:	e008      	b.n	80023e2 <_printf_common+0xb2>
 80023d0:	2301      	movs	r3, #1
 80023d2:	4652      	mov	r2, sl
 80023d4:	4649      	mov	r1, r9
 80023d6:	4638      	mov	r0, r7
 80023d8:	47c0      	blx	r8
 80023da:	3001      	adds	r0, #1
 80023dc:	d103      	bne.n	80023e6 <_printf_common+0xb6>
 80023de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023e6:	3501      	adds	r5, #1
 80023e8:	e7c1      	b.n	800236e <_printf_common+0x3e>
 80023ea:	2030      	movs	r0, #48	; 0x30
 80023ec:	18e1      	adds	r1, r4, r3
 80023ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80023f2:	1c5a      	adds	r2, r3, #1
 80023f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80023f8:	4422      	add	r2, r4
 80023fa:	3302      	adds	r3, #2
 80023fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002400:	e7c2      	b.n	8002388 <_printf_common+0x58>
 8002402:	2301      	movs	r3, #1
 8002404:	4622      	mov	r2, r4
 8002406:	4649      	mov	r1, r9
 8002408:	4638      	mov	r0, r7
 800240a:	47c0      	blx	r8
 800240c:	3001      	adds	r0, #1
 800240e:	d0e6      	beq.n	80023de <_printf_common+0xae>
 8002410:	3601      	adds	r6, #1
 8002412:	e7d9      	b.n	80023c8 <_printf_common+0x98>

08002414 <_printf_i>:
 8002414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002418:	7e0f      	ldrb	r7, [r1, #24]
 800241a:	4691      	mov	r9, r2
 800241c:	2f78      	cmp	r7, #120	; 0x78
 800241e:	4680      	mov	r8, r0
 8002420:	460c      	mov	r4, r1
 8002422:	469a      	mov	sl, r3
 8002424:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002426:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800242a:	d807      	bhi.n	800243c <_printf_i+0x28>
 800242c:	2f62      	cmp	r7, #98	; 0x62
 800242e:	d80a      	bhi.n	8002446 <_printf_i+0x32>
 8002430:	2f00      	cmp	r7, #0
 8002432:	f000 80d5 	beq.w	80025e0 <_printf_i+0x1cc>
 8002436:	2f58      	cmp	r7, #88	; 0x58
 8002438:	f000 80c1 	beq.w	80025be <_printf_i+0x1aa>
 800243c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002440:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002444:	e03a      	b.n	80024bc <_printf_i+0xa8>
 8002446:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800244a:	2b15      	cmp	r3, #21
 800244c:	d8f6      	bhi.n	800243c <_printf_i+0x28>
 800244e:	a101      	add	r1, pc, #4	; (adr r1, 8002454 <_printf_i+0x40>)
 8002450:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002454:	080024ad 	.word	0x080024ad
 8002458:	080024c1 	.word	0x080024c1
 800245c:	0800243d 	.word	0x0800243d
 8002460:	0800243d 	.word	0x0800243d
 8002464:	0800243d 	.word	0x0800243d
 8002468:	0800243d 	.word	0x0800243d
 800246c:	080024c1 	.word	0x080024c1
 8002470:	0800243d 	.word	0x0800243d
 8002474:	0800243d 	.word	0x0800243d
 8002478:	0800243d 	.word	0x0800243d
 800247c:	0800243d 	.word	0x0800243d
 8002480:	080025c7 	.word	0x080025c7
 8002484:	080024ed 	.word	0x080024ed
 8002488:	08002581 	.word	0x08002581
 800248c:	0800243d 	.word	0x0800243d
 8002490:	0800243d 	.word	0x0800243d
 8002494:	080025e9 	.word	0x080025e9
 8002498:	0800243d 	.word	0x0800243d
 800249c:	080024ed 	.word	0x080024ed
 80024a0:	0800243d 	.word	0x0800243d
 80024a4:	0800243d 	.word	0x0800243d
 80024a8:	08002589 	.word	0x08002589
 80024ac:	682b      	ldr	r3, [r5, #0]
 80024ae:	1d1a      	adds	r2, r3, #4
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	602a      	str	r2, [r5, #0]
 80024b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80024b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80024bc:	2301      	movs	r3, #1
 80024be:	e0a0      	b.n	8002602 <_printf_i+0x1ee>
 80024c0:	6820      	ldr	r0, [r4, #0]
 80024c2:	682b      	ldr	r3, [r5, #0]
 80024c4:	0607      	lsls	r7, r0, #24
 80024c6:	f103 0104 	add.w	r1, r3, #4
 80024ca:	6029      	str	r1, [r5, #0]
 80024cc:	d501      	bpl.n	80024d2 <_printf_i+0xbe>
 80024ce:	681e      	ldr	r6, [r3, #0]
 80024d0:	e003      	b.n	80024da <_printf_i+0xc6>
 80024d2:	0646      	lsls	r6, r0, #25
 80024d4:	d5fb      	bpl.n	80024ce <_printf_i+0xba>
 80024d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80024da:	2e00      	cmp	r6, #0
 80024dc:	da03      	bge.n	80024e6 <_printf_i+0xd2>
 80024de:	232d      	movs	r3, #45	; 0x2d
 80024e0:	4276      	negs	r6, r6
 80024e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80024e6:	230a      	movs	r3, #10
 80024e8:	4859      	ldr	r0, [pc, #356]	; (8002650 <_printf_i+0x23c>)
 80024ea:	e012      	b.n	8002512 <_printf_i+0xfe>
 80024ec:	682b      	ldr	r3, [r5, #0]
 80024ee:	6820      	ldr	r0, [r4, #0]
 80024f0:	1d19      	adds	r1, r3, #4
 80024f2:	6029      	str	r1, [r5, #0]
 80024f4:	0605      	lsls	r5, r0, #24
 80024f6:	d501      	bpl.n	80024fc <_printf_i+0xe8>
 80024f8:	681e      	ldr	r6, [r3, #0]
 80024fa:	e002      	b.n	8002502 <_printf_i+0xee>
 80024fc:	0641      	lsls	r1, r0, #25
 80024fe:	d5fb      	bpl.n	80024f8 <_printf_i+0xe4>
 8002500:	881e      	ldrh	r6, [r3, #0]
 8002502:	2f6f      	cmp	r7, #111	; 0x6f
 8002504:	bf0c      	ite	eq
 8002506:	2308      	moveq	r3, #8
 8002508:	230a      	movne	r3, #10
 800250a:	4851      	ldr	r0, [pc, #324]	; (8002650 <_printf_i+0x23c>)
 800250c:	2100      	movs	r1, #0
 800250e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002512:	6865      	ldr	r5, [r4, #4]
 8002514:	2d00      	cmp	r5, #0
 8002516:	bfa8      	it	ge
 8002518:	6821      	ldrge	r1, [r4, #0]
 800251a:	60a5      	str	r5, [r4, #8]
 800251c:	bfa4      	itt	ge
 800251e:	f021 0104 	bicge.w	r1, r1, #4
 8002522:	6021      	strge	r1, [r4, #0]
 8002524:	b90e      	cbnz	r6, 800252a <_printf_i+0x116>
 8002526:	2d00      	cmp	r5, #0
 8002528:	d04b      	beq.n	80025c2 <_printf_i+0x1ae>
 800252a:	4615      	mov	r5, r2
 800252c:	fbb6 f1f3 	udiv	r1, r6, r3
 8002530:	fb03 6711 	mls	r7, r3, r1, r6
 8002534:	5dc7      	ldrb	r7, [r0, r7]
 8002536:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800253a:	4637      	mov	r7, r6
 800253c:	42bb      	cmp	r3, r7
 800253e:	460e      	mov	r6, r1
 8002540:	d9f4      	bls.n	800252c <_printf_i+0x118>
 8002542:	2b08      	cmp	r3, #8
 8002544:	d10b      	bne.n	800255e <_printf_i+0x14a>
 8002546:	6823      	ldr	r3, [r4, #0]
 8002548:	07de      	lsls	r6, r3, #31
 800254a:	d508      	bpl.n	800255e <_printf_i+0x14a>
 800254c:	6923      	ldr	r3, [r4, #16]
 800254e:	6861      	ldr	r1, [r4, #4]
 8002550:	4299      	cmp	r1, r3
 8002552:	bfde      	ittt	le
 8002554:	2330      	movle	r3, #48	; 0x30
 8002556:	f805 3c01 	strble.w	r3, [r5, #-1]
 800255a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800255e:	1b52      	subs	r2, r2, r5
 8002560:	6122      	str	r2, [r4, #16]
 8002562:	464b      	mov	r3, r9
 8002564:	4621      	mov	r1, r4
 8002566:	4640      	mov	r0, r8
 8002568:	f8cd a000 	str.w	sl, [sp]
 800256c:	aa03      	add	r2, sp, #12
 800256e:	f7ff fedf 	bl	8002330 <_printf_common>
 8002572:	3001      	adds	r0, #1
 8002574:	d14a      	bne.n	800260c <_printf_i+0x1f8>
 8002576:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800257a:	b004      	add	sp, #16
 800257c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002580:	6823      	ldr	r3, [r4, #0]
 8002582:	f043 0320 	orr.w	r3, r3, #32
 8002586:	6023      	str	r3, [r4, #0]
 8002588:	2778      	movs	r7, #120	; 0x78
 800258a:	4832      	ldr	r0, [pc, #200]	; (8002654 <_printf_i+0x240>)
 800258c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002590:	6823      	ldr	r3, [r4, #0]
 8002592:	6829      	ldr	r1, [r5, #0]
 8002594:	061f      	lsls	r7, r3, #24
 8002596:	f851 6b04 	ldr.w	r6, [r1], #4
 800259a:	d402      	bmi.n	80025a2 <_printf_i+0x18e>
 800259c:	065f      	lsls	r7, r3, #25
 800259e:	bf48      	it	mi
 80025a0:	b2b6      	uxthmi	r6, r6
 80025a2:	07df      	lsls	r7, r3, #31
 80025a4:	bf48      	it	mi
 80025a6:	f043 0320 	orrmi.w	r3, r3, #32
 80025aa:	6029      	str	r1, [r5, #0]
 80025ac:	bf48      	it	mi
 80025ae:	6023      	strmi	r3, [r4, #0]
 80025b0:	b91e      	cbnz	r6, 80025ba <_printf_i+0x1a6>
 80025b2:	6823      	ldr	r3, [r4, #0]
 80025b4:	f023 0320 	bic.w	r3, r3, #32
 80025b8:	6023      	str	r3, [r4, #0]
 80025ba:	2310      	movs	r3, #16
 80025bc:	e7a6      	b.n	800250c <_printf_i+0xf8>
 80025be:	4824      	ldr	r0, [pc, #144]	; (8002650 <_printf_i+0x23c>)
 80025c0:	e7e4      	b.n	800258c <_printf_i+0x178>
 80025c2:	4615      	mov	r5, r2
 80025c4:	e7bd      	b.n	8002542 <_printf_i+0x12e>
 80025c6:	682b      	ldr	r3, [r5, #0]
 80025c8:	6826      	ldr	r6, [r4, #0]
 80025ca:	1d18      	adds	r0, r3, #4
 80025cc:	6961      	ldr	r1, [r4, #20]
 80025ce:	6028      	str	r0, [r5, #0]
 80025d0:	0635      	lsls	r5, r6, #24
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	d501      	bpl.n	80025da <_printf_i+0x1c6>
 80025d6:	6019      	str	r1, [r3, #0]
 80025d8:	e002      	b.n	80025e0 <_printf_i+0x1cc>
 80025da:	0670      	lsls	r0, r6, #25
 80025dc:	d5fb      	bpl.n	80025d6 <_printf_i+0x1c2>
 80025de:	8019      	strh	r1, [r3, #0]
 80025e0:	2300      	movs	r3, #0
 80025e2:	4615      	mov	r5, r2
 80025e4:	6123      	str	r3, [r4, #16]
 80025e6:	e7bc      	b.n	8002562 <_printf_i+0x14e>
 80025e8:	682b      	ldr	r3, [r5, #0]
 80025ea:	2100      	movs	r1, #0
 80025ec:	1d1a      	adds	r2, r3, #4
 80025ee:	602a      	str	r2, [r5, #0]
 80025f0:	681d      	ldr	r5, [r3, #0]
 80025f2:	6862      	ldr	r2, [r4, #4]
 80025f4:	4628      	mov	r0, r5
 80025f6:	f000 f859 	bl	80026ac <memchr>
 80025fa:	b108      	cbz	r0, 8002600 <_printf_i+0x1ec>
 80025fc:	1b40      	subs	r0, r0, r5
 80025fe:	6060      	str	r0, [r4, #4]
 8002600:	6863      	ldr	r3, [r4, #4]
 8002602:	6123      	str	r3, [r4, #16]
 8002604:	2300      	movs	r3, #0
 8002606:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800260a:	e7aa      	b.n	8002562 <_printf_i+0x14e>
 800260c:	462a      	mov	r2, r5
 800260e:	4649      	mov	r1, r9
 8002610:	4640      	mov	r0, r8
 8002612:	6923      	ldr	r3, [r4, #16]
 8002614:	47d0      	blx	sl
 8002616:	3001      	adds	r0, #1
 8002618:	d0ad      	beq.n	8002576 <_printf_i+0x162>
 800261a:	6823      	ldr	r3, [r4, #0]
 800261c:	079b      	lsls	r3, r3, #30
 800261e:	d413      	bmi.n	8002648 <_printf_i+0x234>
 8002620:	68e0      	ldr	r0, [r4, #12]
 8002622:	9b03      	ldr	r3, [sp, #12]
 8002624:	4298      	cmp	r0, r3
 8002626:	bfb8      	it	lt
 8002628:	4618      	movlt	r0, r3
 800262a:	e7a6      	b.n	800257a <_printf_i+0x166>
 800262c:	2301      	movs	r3, #1
 800262e:	4632      	mov	r2, r6
 8002630:	4649      	mov	r1, r9
 8002632:	4640      	mov	r0, r8
 8002634:	47d0      	blx	sl
 8002636:	3001      	adds	r0, #1
 8002638:	d09d      	beq.n	8002576 <_printf_i+0x162>
 800263a:	3501      	adds	r5, #1
 800263c:	68e3      	ldr	r3, [r4, #12]
 800263e:	9903      	ldr	r1, [sp, #12]
 8002640:	1a5b      	subs	r3, r3, r1
 8002642:	42ab      	cmp	r3, r5
 8002644:	dcf2      	bgt.n	800262c <_printf_i+0x218>
 8002646:	e7eb      	b.n	8002620 <_printf_i+0x20c>
 8002648:	2500      	movs	r5, #0
 800264a:	f104 0619 	add.w	r6, r4, #25
 800264e:	e7f5      	b.n	800263c <_printf_i+0x228>
 8002650:	080027b7 	.word	0x080027b7
 8002654:	080027c8 	.word	0x080027c8

08002658 <memmove>:
 8002658:	4288      	cmp	r0, r1
 800265a:	b510      	push	{r4, lr}
 800265c:	eb01 0402 	add.w	r4, r1, r2
 8002660:	d902      	bls.n	8002668 <memmove+0x10>
 8002662:	4284      	cmp	r4, r0
 8002664:	4623      	mov	r3, r4
 8002666:	d807      	bhi.n	8002678 <memmove+0x20>
 8002668:	1e43      	subs	r3, r0, #1
 800266a:	42a1      	cmp	r1, r4
 800266c:	d008      	beq.n	8002680 <memmove+0x28>
 800266e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002672:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002676:	e7f8      	b.n	800266a <memmove+0x12>
 8002678:	4601      	mov	r1, r0
 800267a:	4402      	add	r2, r0
 800267c:	428a      	cmp	r2, r1
 800267e:	d100      	bne.n	8002682 <memmove+0x2a>
 8002680:	bd10      	pop	{r4, pc}
 8002682:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002686:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800268a:	e7f7      	b.n	800267c <memmove+0x24>

0800268c <_sbrk_r>:
 800268c:	b538      	push	{r3, r4, r5, lr}
 800268e:	2300      	movs	r3, #0
 8002690:	4d05      	ldr	r5, [pc, #20]	; (80026a8 <_sbrk_r+0x1c>)
 8002692:	4604      	mov	r4, r0
 8002694:	4608      	mov	r0, r1
 8002696:	602b      	str	r3, [r5, #0]
 8002698:	f7fd ff90 	bl	80005bc <_sbrk>
 800269c:	1c43      	adds	r3, r0, #1
 800269e:	d102      	bne.n	80026a6 <_sbrk_r+0x1a>
 80026a0:	682b      	ldr	r3, [r5, #0]
 80026a2:	b103      	cbz	r3, 80026a6 <_sbrk_r+0x1a>
 80026a4:	6023      	str	r3, [r4, #0]
 80026a6:	bd38      	pop	{r3, r4, r5, pc}
 80026a8:	20000258 	.word	0x20000258

080026ac <memchr>:
 80026ac:	4603      	mov	r3, r0
 80026ae:	b510      	push	{r4, lr}
 80026b0:	b2c9      	uxtb	r1, r1
 80026b2:	4402      	add	r2, r0
 80026b4:	4293      	cmp	r3, r2
 80026b6:	4618      	mov	r0, r3
 80026b8:	d101      	bne.n	80026be <memchr+0x12>
 80026ba:	2000      	movs	r0, #0
 80026bc:	e003      	b.n	80026c6 <memchr+0x1a>
 80026be:	7804      	ldrb	r4, [r0, #0]
 80026c0:	3301      	adds	r3, #1
 80026c2:	428c      	cmp	r4, r1
 80026c4:	d1f6      	bne.n	80026b4 <memchr+0x8>
 80026c6:	bd10      	pop	{r4, pc}

080026c8 <memcpy>:
 80026c8:	440a      	add	r2, r1
 80026ca:	4291      	cmp	r1, r2
 80026cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80026d0:	d100      	bne.n	80026d4 <memcpy+0xc>
 80026d2:	4770      	bx	lr
 80026d4:	b510      	push	{r4, lr}
 80026d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80026da:	4291      	cmp	r1, r2
 80026dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80026e0:	d1f9      	bne.n	80026d6 <memcpy+0xe>
 80026e2:	bd10      	pop	{r4, pc}

080026e4 <_realloc_r>:
 80026e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026e8:	4680      	mov	r8, r0
 80026ea:	4614      	mov	r4, r2
 80026ec:	460e      	mov	r6, r1
 80026ee:	b921      	cbnz	r1, 80026fa <_realloc_r+0x16>
 80026f0:	4611      	mov	r1, r2
 80026f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80026f6:	f7ff bc37 	b.w	8001f68 <_malloc_r>
 80026fa:	b92a      	cbnz	r2, 8002708 <_realloc_r+0x24>
 80026fc:	f7ff fbcc 	bl	8001e98 <_free_r>
 8002700:	4625      	mov	r5, r4
 8002702:	4628      	mov	r0, r5
 8002704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002708:	f000 f81b 	bl	8002742 <_malloc_usable_size_r>
 800270c:	4284      	cmp	r4, r0
 800270e:	4607      	mov	r7, r0
 8002710:	d802      	bhi.n	8002718 <_realloc_r+0x34>
 8002712:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002716:	d812      	bhi.n	800273e <_realloc_r+0x5a>
 8002718:	4621      	mov	r1, r4
 800271a:	4640      	mov	r0, r8
 800271c:	f7ff fc24 	bl	8001f68 <_malloc_r>
 8002720:	4605      	mov	r5, r0
 8002722:	2800      	cmp	r0, #0
 8002724:	d0ed      	beq.n	8002702 <_realloc_r+0x1e>
 8002726:	42bc      	cmp	r4, r7
 8002728:	4622      	mov	r2, r4
 800272a:	4631      	mov	r1, r6
 800272c:	bf28      	it	cs
 800272e:	463a      	movcs	r2, r7
 8002730:	f7ff ffca 	bl	80026c8 <memcpy>
 8002734:	4631      	mov	r1, r6
 8002736:	4640      	mov	r0, r8
 8002738:	f7ff fbae 	bl	8001e98 <_free_r>
 800273c:	e7e1      	b.n	8002702 <_realloc_r+0x1e>
 800273e:	4635      	mov	r5, r6
 8002740:	e7df      	b.n	8002702 <_realloc_r+0x1e>

08002742 <_malloc_usable_size_r>:
 8002742:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002746:	1f18      	subs	r0, r3, #4
 8002748:	2b00      	cmp	r3, #0
 800274a:	bfbc      	itt	lt
 800274c:	580b      	ldrlt	r3, [r1, r0]
 800274e:	18c0      	addlt	r0, r0, r3
 8002750:	4770      	bx	lr
	...

08002754 <_init>:
 8002754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002756:	bf00      	nop
 8002758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800275a:	bc08      	pop	{r3}
 800275c:	469e      	mov	lr, r3
 800275e:	4770      	bx	lr

08002760 <_fini>:
 8002760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002762:	bf00      	nop
 8002764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002766:	bc08      	pop	{r3}
 8002768:	469e      	mov	lr, r3
 800276a:	4770      	bx	lr
